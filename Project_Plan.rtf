{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\froman\fcharset0 TimesNewRomanPSMT;\f4\ftech\fcharset77 Symbol;\f5\froman\fcharset0 Times-Roman;
\f6\froman\fcharset0 Times-Italic;\f7\fmodern\fcharset0 CourierNewPSMT;\f8\fnil\fcharset0 AppleColorEmoji;
\f9\fmodern\fcharset0 CourierNewPS-ItalicMT;\f10\ftech\fcharset0 Wingdings-Regular;\f11\fswiss\fcharset0 ArialMT;
\f12\fswiss\fcharset0 Helvetica-BoldOblique;\f13\froman\fcharset0 TimesNewRomanPS-BoldMT;\f14\fmodern\fcharset0 CourierNewPS-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red11\green90\blue178;\red15\green55\blue78;
\red56\green101\blue115;\red0\green0\blue0;\red251\green0\blue7;\red230\green0\blue6;\red65\green154\blue35;
\red1\green21\blue77;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c43922\c75294;\cssrgb\c5882\c27843\c38039;
\cssrgb\c27451\c47059\c52549;\cssrgb\c0\c0\c0\c84706;\cssrgb\c100000\c0\c0;\cssrgb\c93333\c0\c0;\cssrgb\c30588\c65490\c18039;
\cssrgb\c0\c12549\c37647;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid602\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl490\sa213\partightenfactor0

\fs42\fsmilli21333 \cf3 Project Plan
\fs32 \cf2 \
\'a0\
\pard\pardeftab720\sl613\sa213\partightenfactor0

\fs53\fsmilli26667 \cf3 The Development and the Deployment of the Algorithmic Litecoin Trading System
\fs32 \cf2 \
\'a0\
\'a0\
\'a0\
Petri Makkonen\
14.9.2025\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl429\partightenfactor0

\f1\b\fs37\fsmilli18667 \cf4 Table of Contents\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\b0\fs32 \cf2 \'a0\
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul \ulc5 1.
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 The Prerequisites of the Project\cf2 \ulnone \
\cf5 \ul 2. \'a0\'a0\'a0\'a0\'a0\'a0Data Collection and Saving\cf2 \ulnone \
\pard\pardeftab720\li1600\fi-960\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 2.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Collecting and Saving On-Chain and Off-Chain Parameters for Bayesian LSTM Price \ulnone \uc0\u8232 \ul Prediction Model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0
\cf5 \ul 2.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 The Protocol for Data Collecting and Saving Process\cf2 \ulnone \
\cf5 \ul 2.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 List of the Parameters Collected and Saved\cf2 \ulnone \
\cf5 \ul 2.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 On-Chain Data Collecting and Saving to Parquet File\cf2 \ulnone \
\cf5 \ul 2.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Procedures in Collecting Whale Activity Data\cf2 \ulnone \
\cf5 \ul 2.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Information Needed for Collecting and Storing Data\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 3.
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Actions after the Training and Testing Data Collection and Saving Process\cf2 \ulnone \
\pard\pardeftab720\li1600\fi-960\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 3.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Collecting and Saving On-Chain and Off-Chain Parameters for Bayesian LSTM Price \ulnone \uc0\u8232 \ul Prediction Model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0
\cf5 \ul 3.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 The Protocol for Data Collecting and Saving Process\cf2 \ulnone \
\cf5 \ul 3.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Adding the Price Prediction Columns to Parquet File\cf2 \ulnone \
\cf5 \ul 3.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Adding the Kelly Fraction Column to Parquet file\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 4
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Critical Protocol Points; Defining the \'91core_protocol.md\'92 File in Git\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 4.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 The Contents of \'91core_protocol.md\'92 File\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 5
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Deploying Multi-AI Workflow for LTC Trading System Development\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 5.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 System Architecture - Mandatory Multi-AI Coordination\cf2 \ulnone \
\cf5 \ul 5.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Drift Prevention Implementation\cf2 \ulnone \
\cf5 \ul 5.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Continuous Development Workflow\cf2 \ulnone \
\cf5 \ul 5.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Mathematical Validation Automation\cf2 \ulnone \
\cf5 \ul 5.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Shared State Management\cf2 \ulnone \
\cf5 \ul 5.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Implementation Strategy\cf2 \ulnone \
\cf5 \ul 5.7
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Critical Success Factors\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 6
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Designing and Defining a Dynamic Kelly Criterion for a Bayesian LSTM-Based Crypto Trading Model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 6.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Problem of the Traditional Kelly Criterion\cf2 \ulnone \
\cf5 \ul 6.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Enhanced Kelly Fraction Calculation Method\cf2 \ulnone \
\cf5 \ul 6.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Mathematical Model: Kelly Fraction for Gaussian Price Prediction\cf2 \ulnone \
\cf5 \ul 6.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Choosing the Best Numerical Method for Calculating the Integral Function\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 7.
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Enhanced Time-Horizon Prediction Strategy\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 7.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Problem Statement\cf2 \ulnone \
\cf5 \ul 7.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Theoretical Foundation\cf2 \ulnone \
\cf5 \ul 7.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Adaptive Attention Architecture\cf2 \ulnone \
\cf5 \ul 7.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Adaptive Weighting Strategies\cf2 \ulnone \
\cf5 \ul 7.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Implementation Architecture\cf2 \ulnone \
\cf5 \ul 7.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Historical Data Buffer Management\cf2 \ulnone \
\cf5 \ul 7.7
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Mathematical Validation\cf2 \ulnone \
\cf5 \ul 7.8
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Performance Validation Framework\cf2 \ulnone \
\cf5 \ul 7.9
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Integration with Bayesian LSTM\cf2 \ulnone \
\cf5 \ul 7.10
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Conclusion\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 8
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Making the Bayesian LSTM Model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 8.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Start with a Baseline Bayesian LSTM\cf2 \ulnone \
\cf5 \ul 8.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Verify Data and the Model Pipeline\cf2 \ulnone \
\cf5 \ul 8.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Hyperparameter Tuning\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 9\'a0\'a0\'a0\'a0 Search for Optimal Hyperparameters\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 9.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Core model (Bayesian LSTM w/ MC Dropout)\cf2 \ulnone \
\cf5 \ul 9.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Training / optimization\cf2 \ulnone \
\cf5 \ul 9.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Data & normalization (per-feature, fit on train only)\cf2 \ulnone \
\cf5 \ul 9.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Early stopping / validation (time-series aware)\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 10 
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Defining the Bayesian LSTM Model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 10.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Rank and pick winners (principled, reproducible)\cf2 \ulnone \
\cf5 \ul 10.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Check uncertainty quality (not just error)\cf2 \ulnone \
\cf5 \ul 10.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Sanity checks before freezing\cf2 \ulnone \
\cf5 \ul 10.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Local \'93exploitation\'94 search around the best\cf2 \ulnone \
\cf5 \ul 10.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Finalize model\cf2 \ulnone \
\cf5 \ul 10.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Backtest with trading logic (paper mode)\cf2 \ulnone \
\cf5 \ul 10.7
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Optional boosts if backtest underwhelms\cf2 \ulnone \
\cf5 \ul 10.8
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Production hardening\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 11
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Applying Enhanced Methods for Bayesian LSTM model\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 11.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Attention Mechanisms & Multi-Head Architecture\cf2 \ulnone \
\cf5 \ul 11.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Ensemble Methods\cf2 \ulnone \
\cf5 \ul 11.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 LSTM + Transformer Hybrid Architecture\cf2 \ulnone \
\cf5 \ul 11.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Sophisticated Uncertainty Quantification\cf2 \ulnone \
\cf5 \ul 11.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Implementation Strategy\cf2 \ulnone \
\pard\pardeftab720\li960\fi-640\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 12
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Combining the Data of Technical Indicators and Sentiment Data to the Bayesian LSTM \'a0\'a0\'a0model prediction\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 12.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Technical Indicators That Add Real Value\cf2 \ulnone \
\cf5 \ul 12.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Sentiment Data That Actually Matters\cf2 \ulnone \
\cf5 \ul 12.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 The Integration Strategy: Hierarchical Fusion\cf2 \ulnone \
\cf5 \ul 12.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 The Kelly Criterion Integration\cf2 \ulnone \
\cf5 \ul 12.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Practical Implementation Sequence\cf2 \ulnone \
\cf5 \ul 12.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Why This Specific Combination Works\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 13
\f0\b0\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 \cf5 \ulc5 Setting Up Crypto Paper Trading System\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 13.1
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Simulating Real-Time Trading\cf2 \ulnone \
\cf5 \ul 13.2
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Real-Time Data Collecting and Saving During Paper Trading Process\cf2 \ulnone \
\pard\pardeftab720\li1600\fi-960\sl306\partightenfactor0
\cf5 \ul 13.3
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Predicting the Crypto Prices and Defining the Profitable Amount of the Capital to \ulnone \uc0\u8232 \ul Be Invested at Each Moment\cf2 \ulnone \
\cf5 \ul 13.4
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Bayesian LSTM Paper Trading System: Summary and Logic Aligned with Distributional \ulnone \uc0\u8232 \ul Kelly Fraction Methodology\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0
\cf5 \ul 13.5
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Analyzing Paper Trading Performance\cf2 \ulnone \
\cf5 \ul 13.6
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Printing and Plotting Paper Trading results\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 14. Progressive Development and Deployment Strategy\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 14.1 
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Development Philosophy and Approach\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f2\i \cf5 \ul Development Phases
\f0\i0 \cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0
\cf5 \ul 14.2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Dual-Mode Architecture Requirements\cf2 \ulnone \
\cf5 \ul 14.3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Local Development Environment Setup\cf2 \ulnone \
\pard\pardeftab720\li320\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf5 \ul 14.4 Terminal-to-Headless Transition Process\cf2 \ulnone \
\pard\pardeftab720\li640\sl306\partightenfactor0

\f0\b0\fs26\fsmilli13333 \cf5 \ul 14.5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DigitalOcean Infrastructure Requirements\cf2 \ulnone \
\cf5 \ul 14.6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Production Deployment Strategy\cf2 \ulnone \
\cf5 \ul 14.7 
\fs32 \cf6 \ulc6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs26\fsmilli13333 \cf5 \ulc5 Monitoring and Operations\cf2 \ulnone \
\cf5 \ul 14.8 \'a0\'a0\'a0\'a0\'a0\'a0\'a0Migration Checklist and Validation\cf2 \ulnone \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li480\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 IMPORTANT NOTE
\f0\b0\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This project plan is made for human use and, especially, to the use of multi-AI model. This project plan has been structured so that a multi-AI model could make prompts itself and work independently or at least semi-independently while creating a Python Repository for Algorithmic Litecoin Price Prediction and Trading system.
\fs32 \
\'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\li480\fi-480\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f0\fs42\fsmilli21333 The Prerequisites of the Project \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 The development project of this project is based on a Python-based repository with a strictly modular structure.
\fs32 \

\fs29\fsmilli14667 The development process of the repository is based on multi-AI model system. The AI models applied are Claude Code, GPT 4/5, and local Llama (Meta\'92s Llama 3.1, 8-billion-parameter model
\f1\b , quantized in 
\f0\b0 Q4_K_M
\f1\b  format. This is the official 
\f0\b0 July 2024 release
\f1\b )
\f0\b0 .
\fs32 \

\fs29\fsmilli14667 The local terminal used in the development process is Mac mini M4 32GB RAM 1TB SSD.
\fs32 \

\fs29\fsmilli14667 The repository is developed on GitHub. Local Llama serves as the coordinator, and the Python Orchestration Layer is linking GitHub with Llama, GPT-4/5, and Claude Code to ensure smooth multi-model collaboration. 
\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Python Orchestration Layer
\f0\b0  is needed for:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Running the Git commands
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Passing repo state to Llama (and to Claude/GPT)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Routing the prompts/responses
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Receiving AI outputs and deciding what to commit
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Llama is continuously reading the protocol.md file in Git and taking care that the essential premises of the project will be followed by all the project\'92s functional sections. 
\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The Orchestration Layer is the only mechanism that has direct and reciprocal connection to GitHub.\'a0\'a0 
\f3\fs32 \

\f0\fs29\fsmilli14667 The Python orchestrator alone could not act as a high-quality, properly and thoroughly functioning control mechanism.
\f3\fs32 \

\f0\fs29\fsmilli14667 The Python orchestration layer should not let give any signals or make any modifications to GitHub without a preceding careful analysis of the proposed modification to GitHub. This final analysis should be made by Llama. 
\f3\fs32 \

\f0\fs29\fsmilli14667 The orchestration layer should not let give any signals or make any modifications to GitHub without Llama having precedingly carefully analyzed the proposed modifications to be transferred to GitHub. All the dataflow between Python orchestrator and GitHub should be continuously and effectively controlled by Llama. 
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\'a0\
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 2. Data Collection and Saving\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.1\'a0\'a0\'a0\'a0\'a0 Collecting and Saving On-Chain and Off-Chain Parameters for Bayesian LSTM Price Prediction Model\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The meaning of collecting and saving Litecoin on-chain (including mempool data) and off-chain data is to make a Bayesian LSTM model for making ultra-short time period (up to 240 seconds) Litecoin price predictions, but also the fundamental parameters and sentiment analysis. For this purpose, Litecoin data must be collected continuously for 4 weeks (28 days) time.\'a0 
\fs32 \

\fs29\fsmilli14667 Litecoin on-chain and off-chain data must be collected exactly from the same time period so that the on-chain and off-chain datasets can later be merged to relevant single dataset for training and testing the Bayesian LSTM model. 
\fs32 \

\fs29\fsmilli14667 The training and testing off-chain and on-chain data is collected and saved in 200 millisecond time intervals continuously for 28 days. Trading Data is collected from Binance Trading platform using Binance API. Blockchain Data is collected from Litecoin Blockchain node that has been downloaded, maintained and continuously updated.\'a0 
\fs32 \

\fs29\fsmilli14667 The data collection must be operated in DigitalOcean VM. We must download the entire Litecoin Core and the entire Litecoin Node to the DigitalOcean droplet, and Litecoin Core must be kept in real time status during the whole data collection. So, we must have continuous API connections both to Binance and Litecoin Node during the whole data collection period. 
\fs32 \

\fs29\fsmilli14667 The collected data is saved in several Parquet files. A new Parquet file is made in 90-minute intervals, so that the size of each Parquet file remains reasonable. This helps us to avoid increasing time gaps caused by data saving during the data collecting process. On-chain data and off-chain data are saved to their own Parquet files alongside the whole data collecting process. 
\fs32 \

\fs29\fsmilli14667 The data collected and saved should be in such a format that it could act as input data for the Bayesian LSTM model training process for ultra-short time horizon Litecoin price prediction. 
\fs32 \

\fs29\fsmilli14667 One of the main principles of the whole project is to make it modular. In other words, it should contain several small Python algorithms, not long ones. So, we should continuously remember to avoid making long scripts. This project structure is aimed at simplifying project development and optimizing the use of AI during the development process.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.2\'a0\'a0\'a0\'a0\'a0 The Protocol for Data Collecting and Saving Process\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.2.1\'a0\'a0\'a0\'a0 Data Collecting and Saving Process for the First Training and Testing of the Bayesian LSTM model\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The Parquet file that are created, should be named aligning with the timestamp when the file has been created, e.g. \'91on_chain_DDMMYYYY.HHMMSS.parquet\'92 and \'91off_chain_DDMMYYYY.HHMMSS.parquet\'92. The on-chain and off-chain Litecoin parameters listed below are collected and saved in 200-millisecond intervals to a corresponding Parquet file. The on-chain data (including mempool data) and off-chain data must be collected and saved alongside and concurrently with each other. 
\fs32 \

\fs29\fsmilli14667 In order to avoid the files to expand and to avoid time gaps during the data saving process caused by too large files, the new Parquet files for on-chain and off-chain data saving are made repetitively in 90-minute intervals. 
\fs32 \

\fs29\fsmilli14667 The header of each column is located in the first row, and the headers must be named equally to the name of each parameter listed below. 
\fs32 \

\fs29\fsmilli14667 The frequency of the on-chain and off-chain data points collected and saved must be 200 milliseconds. Each row in the Parquet files represent one 200 millisecond interval timestamp. 
\fs32 \

\fs29\fsmilli14667 All the timestamps in the on-chain and off-chain Parquet files must be set in the time of UTC time zone. 
\fs32 \

\fs29\fsmilli14667 All the timestamps in the on-chain and off-chain Parquet files must be saved at the accuracy of one millisecond.
\fs32 \

\fs29\fsmilli14667 The collected data is saved in a chronological order: Data with later timestamp must always be located in the lower row. The first row of the table is for headers. The columns in each Parquet file should be located side by side. 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.2.2\'a0\'a0\'a0\'a0 Data Collecting and Saving Process for the re-training of the Bayesian LSTM model\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 When paper trading / trading process is going on, the on-chain and off-chain data collecting and saving process is continuing according to the same protocol as during the first training and testing process.
\fs32 \

\fs29\fsmilli14667 When a running and unbroken period of paper trading / trading process has last for 14 days, the collected and saved on-chain and off-chain data is processed exactly according to the same protocol as described here. 
\fs32 \

\fs29\fsmilli14667 The Parquet file of these 14 days is merged with the Parquet file of the previous 14 days, creating a new 28-day Parquet file. 
\fs32 \

\fs29\fsmilli14667 The Bayesian LSTM model is re-trained with this new 28-day dataset, and this newly trained model replaces the earlier Bayesian LSTM model in making the LTC price predictions.\'a0\'a0 \'a0
\fs32 \

\fs29\fsmilli14667 The first Bayesian LSTM model re-training is made only after a continuous 28-day period of paper trading / trading period has been completed. The Bayesian LSTM training, testing or re-training process must not be made with a dataset based on shorter time period than 28 days. \'a0\'a0
\fs32 \
\pard\pardeftab720\li960\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.3\'a0\'a0\'a0\'a0\'a0 List of the Parameters Collected and Saved\'a0 \
\'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Off-chain trading data is collected from Binance via Binance API.
\fs32 \

\fs29\fsmilli14667 The off-chain parameters to be collected and saved in Parquet file are listed below. The header of each Parquet file column should be named equally with the word inside the quotation marks. 
\fs32 \

\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94timestamp\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: Precise UTC timestamp of the data point (in accuracy of milliseconds)\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Data type: \'91timestamp[ms]\'92\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93trade_price\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: LTC price of the last realized trade\u8232 Calculation: Directly retrieved from the top of the order book.\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93trade_quantity\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: LTC quantity of the last realized trade\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Calculation: Directly retrieved from the order book.\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93trade_time\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: Timestamp (UTC) of the last realized trade\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Calculation: Directly retrieved from the order book.\u8232 Data type: \'91timestamp[ms]\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94best_bid\'94\'a0\'a0\'a0 \uc0\u8232 Meaning: Best bid price at orderbook level 1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Calculation: Directly retrieved from the order book. \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 6.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93best_ask\'94\'a0\'a0 \uc0\u8232 Meaning: Best ask price at orderbook level 1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Calculation: Directly retrieved from the top of the order book.\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 7.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94orderbook_bid\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: A list of 
\f1\b bid prices
\f0\b0  from levels 2 to 10 (excluding best bid)\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: Direct from order book snapshot\u8232 \'91orderbook_bid = [entry['price'] for entry in orderbook['bids'][1:10]]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 8.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93orderbook_ask\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: A list of 
\f1\b ask prices
\f0\b0  from levels 2 to 10.\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: Direct from order book snapshot:\u8232 \'91orderbook_ask = [entry['price'] for entry in orderbook['asks'][1:10]]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 9.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93mid_price\'94 \uc0\u8232 
\f1\b Meaning
\f0\b0 : The average of the best bid and best ask at level 1.\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: \'91mid_price = (best_bid + best_ask) / 2\'92\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 10.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93mid_prices\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : List of mid-prices for levels 2 to 10.\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: \'91mid_prices = [(bid + ask) / 2 for bid, ask in zip(orderbook_bid, orderbook_ask)]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 11.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94spread\'94\'a0\'a0\'a0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : The difference between best ask and best bid.\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: \'91spread = best_ask - best_bid\'92\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 12.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93spreads\'94 \uc0\u8232 
\f1\b Meaning
\f0\b0 : List of spreads at levels 2 to 10.\uc0\u8232 Calculation: \'91spreads = [ask - bid for ask, bid in zip(orderbook_ask, orderbook_bid)]\'92\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 13.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93total_bid_volume\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Sum of quantities at Levels 1\'9610 (bid side)\uc0\u8232 Calculation: \'91total_bid_volume = sum([entry['quantity'] for entry in orderbook['bids'][0:10]])\'92\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 14.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93total_ask_volume\'94\uc0\u8232 
\f1\b Meaning
\f0\b0 : Sum of all 
\f1\b ask quantities
\f0\b0  from levels 1 to 10.\uc0\u8232 Calculation: \'91total_ask_volume = sum([entry['quantity'] for entry in orderbook['asks'][0:10]])\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 15.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93volume_imbalance\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: A normalized measure of buying vs selling pressure at Level 1.\u8232 Calculation:\'a0 \u8232 \'91volume_imbalance = (bid_quantity - ask_quantity) / (bid_quantity + ask_quantity)\'92\'a0\'a0\'a0\'a0 \u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 16.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93bid_ask_volume_imbalance\'94\'a0\'a0 \uc0\u8232 Meaning: Same as above, but 
\f1\b cumulative across levels 1\'9610
\f0\b0 \'a0 \uc0\u8232 Calculation: \u8232 \'91total_bid_volume = sum([entry['quantity'] for entry in orderbook['bids'][0:10]])\u8232 total_ask_volume = sum([entry['quantity'] for entry in orderbook['asks'][0:10]])\u8232 bid_ask_volume_imbalance = (total_bid_volume - total_ask_volume) / (total_bid_volume + total_ask_volume)\'92\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 17.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93weighted_mid_price\'94\uc0\u8232 
\f1\b Meaning
\f0\b0 : A 
\f1\b volume-weighted average of mid-prices
\f0\b0  across levels 1\'9610.\uc0\u8232 
\f1\b Calculation: \uc0\u8232 
\f0\b0 \'91weighted_mid_price = sum(\uc0\u8232 \'a0\'a0\'a0 (bid['quantity'] + ask['quantity']) * ((bid['price'] + ask['price']) / 2)\u8232 \'a0\'a0\'a0 for bid, ask in zip(orderbook['bids'][0:10], orderbook['asks'][0:10])\u8232 ) / sum(\u8232 \'a0\'a0\'a0 (bid['quantity'] + ask['quantity']) for bid, ask in zip(orderbook['bids'][0:10], orderbook['asks'][0:10])\u8232 )\'92\u8232 Data type: \'91float64\'92
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.4\'a0\'a0\'a0\'a0\'a0 On-Chain Data Collecting and Saving to Parquet File \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 On-chain trading data is collected from Litecoin Node.
\fs32 \

\fs29\fsmilli14667 The on-chain parameters to be collected and saved in Parquet file are listed below. The header of each Parquet file column should be named equally with the word inside the quotation marks. 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94timestamp\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: Precise UTC timestamp of the data point (in accuracy of milliseconds)\'a0\'a0\'a0 \u8232 Data type: \'91timestamp[ms]\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_tx_count\'94\uc0\u8232 Meaning
\f0\b0 : Total number of unconfirmed transactions currently in the mempool\uc0\u8232 
\f1\b Calculation
\f0\b0 : Retrieved from \'91getmempoolinfo()['size']\'92\uc0\u8232 
\f1\b Data type
\f0\b0 : \'91int64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_bytes\'94\uc0\u8232 Meaning
\f0\b0 : Total memory size (in bytes) used by all transactions in the mempool\uc0\u8232 
\f1\b Calculation
\f0\b0 : Retrieved from \'91getmempoolinfo()['bytes']\'92\uc0\u8232 
\f1\b Data type
\f0\b0 : \'91int64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_total_fee\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Total fee (in LTC) of all transactions in the mempool\uc0\u8232 
\f1\b Calculation
\f0\b0 : Retrieved from \'91getmempoolinfo()['total_fee']\'92\uc0\u8232 
\f1\b Data type
\f0\b0 : \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_avg_fee_rate\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Average transaction fee rate (LTC per kilobyte or sat/vByte) in the mempool\uc0\u8232 
\f1\b Calculation
\f0\b0 :\uc0\u8232 \'91mempool_avg_fee_rate = mempool_total_fee / (mempool_bytes / 1000)\'a0 # LTC per kB\'92\u8232 Or retrieved directly if available from node\u8232 
\f1\b Data type
\f0\b0 : \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 6.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_fee_std\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Standard deviation of the fee rates of all mempool transactions\uc0\u8232 
\f1\b Calculation
\f0\b0 : Computed from all individual transactions in mempool:\uc0\u8232 \'91fees = [tx['fee'] / tx['size'] for tx in getrawmempool(True).values()]\u8232 mempool_fee_std = np.std(fees)\'92\u8232 
\f1\b Data type
\f0\b0 : \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 7.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93mempool_avg_tx_age\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Average time (in seconds) that transactions have been waiting in the mempool\uc0\u8232 
\f1\b Calculation
\f0\b0 :\uc0\u8232 \'91current_time = time.time()\u8232 ages = [current_time - tx['time'] for tx in getrawmempool(True).values()]\u8232 mempool_avg_tx_age = np.mean(ages)\'92\u8232 
\f1\b Data type
\f0\b0 : \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 8.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93fee_trend\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : Custom indicator representing short-term change in average or max mempool fee rates (e.g., 3-minute slope).\uc0\u8232 
\f1\b Calculation
\f0\b0 : Typically calculated by:\uc0\u8232 Tracking mempool_avg_fee_rate over time (e.g., rolling window)\u8232 Applying linear regression, EMA, or difference between current and past value\u8232 \'91fee_trend = current_avg_fee_rate - avg_fee_rate_3min_ago\'92\u8232 
\f1\b Data type
\f0\b0 : \'91float64\'92
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 9.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93net_whale_activity\'94\uc0\u8232 Meaning
\f0\b0 : The net directional activity of known whale addresses \'97 calculated as 
\f1\b total inflows minus total outflows
\f0\b0  within a short time window (e.g., last 2 seconds).
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f2\i\fs29\fsmilli14667 \cf2 More exactly (6.5.2025): The net flow of LTC to whale addresses (positive = inflow, negative = outflow) in those whale transactions detected in mempool at this moment.
\f0\i0 \uc0\u8232 
\f1\b Calculation
\f0\b0 :\uc0\u8232 \'92net_whale_activity = total_inflows - total_outflows\'92\u8232 Where:\u8232 total_inflows = LTC sent 
\f1\b to
\f0\b0  known whale addresses\uc0\u8232 total_outflows = LTC sent 
\f1\b from
\f0\b0  known whale addresses\uc0\u8232 
\f1\b Data type
\f0\b0 : float64
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 10.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93whale_transaction_volume\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : The total volume (in LTC) of all transactions involving whale addresses (both incoming and outgoing). 
\f2\i More exactly (6.5.2025): The total volume (in LTC) moved in those whale transactions detected in mempool at this moment.
\f0\i0 \uc0\u8232 
\f1\b Calculation
\f0\b0 :\uc0\u8232 \'92whale_transaction_volume = total_inflows + total_outflows\'92\u8232 
\f1\b Data type
\f0\b0 : float64
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 11.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Parameter: \'93whale_transaction_count\'94
\f0\b0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : The number of transactions in the last window that involved known whale addresses (either as sender or receiver).
\fs32 \
\pard\pardeftab720\li960\sl337\sa213\partightenfactor0

\f2\i\fs29\fsmilli14667 \cf2 More exactly (6.5.2025): The number of transactions involving whale addresses (number of Whale UTXOs) detected in mempool at this moment.
\f0\i0 \uc0\u8232 
\f1\b Calculation
\f0\b0 :\uc0\u8232 Count of unique mempool or confirmed transactions where the input or output address matches the known whale address list.\u8232 \'91whale_transaction_count = len([\u8232 \'a0\'a0\'a0 tx for tx in mempool_or_block if any(addr in whale_addresses for addr in tx['inputs'] + tx['outputs'])\u8232 ])\'92\u8232 
\f1\b Data type
\f0\b0 : int64
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.5\'a0\'a0\'a0\'a0\'a0 Procedures in Collecting Whale Activity Data\cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i\fs32 \cf4 2.5.1\'a0\'a0\'a0\'a0 Purpose\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Define an auditable, machine
\f5 \uc0\u8209 
\f0 actionable process for detecting, aggregating, and storing high
\f5 \uc0\u8209 
\f0 value Litecoin (LTC) on
\f5 \uc0\u8209 
\f0 chain activity (\'93whale activity\'94) used as model inputs and trading diagnostics.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.2\'a0\'a0\'a0\'a0 Definition of Whale Transaction\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 A transaction whose total transferred value in LTC is greater than or equal to THRESHOLD_LTC.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.3\'a0\'a0\'a0\'a0 Canonical Threshold and Configuration\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Canonical default: THRESHOLD_LTC = 1000 (configurable via settings.yml). The effective threshold used at runtime must be logged at session start and written into the Parquet metadata.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.4\'a0\'a0\'a0\'a0 Data Sources\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'95 Litecoin full node (RPC): mempool, recent blocks, raw transactions.\uc0\u8232 \'95 Optional indexer (e.g., Electrum/Esplora) for acceleration and cross
\f5 \uc0\u8209 
\f0 check.\uc0\u8232 \'95 Time standard: UTC; all timestamps recorded with millisecond precision.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.4\'a0\'a0\'a0\'a0 Capture Loop (non
\f6 \uc0\u8209 
\f2 blocking)\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 1) Poll mempool every 200 ms and new blocks on arrival.\uc0\u8232 2) For each tx, compute transferred LTC value per output address and total.\u8232 3) If total \u8805  THRESHOLD_LTC \u8594  classify as whale_tx.\u8232 4) Publish event to an internal queue and append to the whale cache (in
\f5 \uc0\u8209 
\f0 memory ring buffer, 10
\f5 \uc0\u8209 
\f0 minute span).\uc0\u8232 5) Do not block trading or feature generation; failures are logged and retried asynchronously.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.5\'a0\'a0\'a0\'a0 Sampling Windows and Derived Features\'a0\'a0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 At 1
\f5 \uc0\u8209 
\f0 second cadence, compute over a trailing 10
\f5 \uc0\u8209 
\f0 minute window:\uc0\u8232 \'95 whale_tx_count_10m (int)\u8232 \'95 whale_total_value_ltc_10m (float)\u8232 \'95 whale_avg_value_ltc_10m (float)\u8232 \'95 whale_max_value_ltc_10m (float)\u8232 \'95 whale_topN_sum_ltc_10m (float, N=5 configurable)\u8232 \'95 whale_net_inflow_ltc_10m (float, if address clustering is available; optional)\u8232 All features are aligned to the 1
\f5 \uc0\u8209 
\f0 second grid (snap forward; keep latest in bucket).
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.6\'a0\'a0\'a0\'a0 Storage Schema (Per
\f6 \uc0\u8209 
\f2 second Parquet)\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Columns written each second (subset relevant to whales):\uc0\u8232 \'95 timestamp (UTC, ms)\u8232 \'95 whale_tx_count_10m (int64)\u8232 \'95 whale_total_value_ltc_10m (float64)\u8232 \'95 whale_avg_value_ltc_10m (float64)\u8232 \'95 whale_max_value_ltc_10m (float64)\u8232 \'95 whale_topN_sum_ltc_10m (float64)\u8232 \'95 threshold_ltc_effective (float64)\u8232 Additionally, persist raw whale events into whale_events_DDMMYYYY_HHMMSS.parquet with fields: txid, timestamp_ms, value_ltc_total, inputs_count, outputs_count, block_height (or -1 for mempool), first_seen_ms.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.7\'a0\'a0\'a0\'a0 Validation and Logging\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'95 On session start: log THRESHOLD_LTC (effective) and data
\f5 \uc0\u8209 
\f0 source connectivity.\uc0\u8232 \'95 For every 10
\f5 \uc0\u8209 
\f0 minute window roll: reconcile whale_tx_count_10m against raw whale_events.\uc0\u8232 \'95 Emit WARN if difference > 2%; attempt resync.\u8232 \'95 All failures are non
\f5 \uc0\u8209 
\f0 blocking; the trading loop continues with last known values.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.8\'a0\'a0\'a0\'a0 Weekly Refresh (Non
\f6 \uc0\u8209 
\f2 Blocking)\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'95 whales.json (reference thresholds, address heuristics, topN parameter) is refreshed weekly by a background job.\uc0\u8232 \'95 Refresh must never block the capture loop; apply new parameters only after the current second closes.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.9\'a0\'a0\'a0\'a0 Integration with Model and Orchestrator\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'95 The orchestrator exposes the features listed above to the model under fixed names and dtypes.\uc0\u8232 \'95 The effective THRESHOLD_LTC is included in model metadata and in the per
\f5 \uc0\u8209 
\f0 second Parquet schema.\uc0\u8232 \'95 Core protocol (Chapter 4) enforces that whale features exist and are typed correctly before model inference.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 2.5.10\'a0 Privacy & Compliance\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'95 Store only transaction
\f5 \uc0\u8209 
\f0 level public blockchain data; do not attempt personal identification.\uc0\u8232 \'95 For any address clustering experiments, store results in a separate, opt
\f5 \uc0\u8209 
\f0 in dataset with hashed identifiers.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 2.6\'a0\'a0\'a0\'a0\'a0 Information Needed for Collecting and Storing Data\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl313\partightenfactor0

\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Litecoin Core
\f0\b0  has been downloaded and is running continuously during the data extraction
\fs32 \
\pard\pardeftab720\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li881\fi-480\sl285\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Litecoin Core has been downloaded to the DigitalOcean droplet
\fs32 \
\pard\pardeftab720\li881\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li2218\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl313\partightenfactor0

\fs29\fsmilli14667 \cf2 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The entire 
\f1\b Litecoin Node (blockchain)
\f0\b0  has been downloaded and is being updated continuously during the data extraction
\fs32 \
\pard\pardeftab720\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li881\fi-480\sl285\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The complete Litecoin Node (blockchain) has been downloaded to the DigitalOcean droplet
\fs32 \
\pard\pardeftab720\li881\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\partightenfactor0

\fs29\fsmilli14667 \cf2 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 \'91litecoin.conf\'92 file has been structured and saved to the DigitalOcean droplet
\fs32 \
\pard\pardeftab720\li881\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\partightenfactor0

\fs29\fsmilli14667 \cf2 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Binance API and RPC credentials are saved in .env file inside the DigitalOcean droplet
\fs32 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\fi480\partightenfactor0

\fs29\fsmilli14667 \cf2 BINANCE_API_KEY = Bk6yGFRYdkRE02jztmfk4xgqZ8Zvhb3LLSuqQ3CTsd2cT5klPiaXbxGEsZZvzC6W
\fs32 \cf7 \uc0\u8232 \u8232 \cf2 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 BINANCE_API_SECRET = fJGkf6I6dqcdL0VoBsUqRTaTU7Nu3hiRNgZdSAO3hvIWrBUkH11LDOSmU35b0r3W
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 LTC_RPC_USER = petrima_071065
\fs32 \cf7 \uc0\u8232 \u8232 \cf2 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 LTC_RPC_PASSWORD = 5eQSFGZ2GJgM
\fs32 \cf7 \uc0\u8232 \u8232 \cf2 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li480\partightenfactor0

\fs29\fsmilli14667 \cf2 When RPC API has been used from the local terminal, the next parameters have been used successfully. We have to consider if these same parameters are applicable when the API connection is made from DigitalOcean VM.
\fs32 \
\pard\pardeftab720\fi480\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 LTC_RPC_HOST=127.0.0.1
\fs32 \

\fs29\fsmilli14667 LTC_RPC_PORT=9332
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 3\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Actions after the Training and Testing Data Collection and Saving Process\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The training and testing off-chain and on-chain data is collected and saved. Trading Data is collected from Binance Trading platform using Binance API. Blockchain Data is collected from Litecoin Blockchain node that has been downloaded, maintained and continuously updated.\'a0 
\fs32 \

\fs29\fsmilli14667 On-chain and off-chain data for Bayesian LSTM model training and testing is collected exactly from the same time period so that the on-chain and off-chain datasets can be merged to relevant dataset for LSTM model training and testing. One requirement for this is that each timestamp in both on-chain and off-chain datasets can be unified to identical timestamps. 
\fs32 \

\fs29\fsmilli14667 The collected data is saved in on-chain and off-chain Parquet files and the data of new data collecting sessions (between pre-defined time intervals) is always stored in new Parquet files. Finally, the complete dataset consists of several on-chain and off-chain Parquet files that contain the data of pre-defined and identical time periods.\'a0 
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 3.1\'a0\'a0\'a0\'a0\'a0 Description of the Current Data Collecting and Saving Repository Functions \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This section supplements the existing project plan by clarifying how the current repository has been operating, and how it should be extended to align fully with the intended specifications.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 3.1.1\'a0\'a0\'a0\'a0 What the Data Collecting and Saving Repository Has Done Already?\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 The repo already handled continuous data collection from Binance (off-chain) and Litecoin Core RPC (on-chain), saving outputs into rotating Parquet files every ~90 minutes. Both sets of files are retained permanently; no deletion occurs.
\fs32 \

\fs29\fsmilli14667 The repo includes a script (merge_parquet_files.py) that has merged rotated Parquet files, but only on a per-source basis (on-chain separately, off-chain separately). It has not merged them into one combined dataset.
\fs32 \
\'a0\
\pard\pardeftab720\li960\fi-960\sl368\sa53\partightenfactor0

\f2\i \cf4 3.1.2
\f3\i0\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f2\i\fs32 What the Project Plan Has to Be Included After the Data Collecting and Saving Process?\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The project plan must therefore include a post-processing pipeline that follows this strict sequence:
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 1. Merge rotated files per source (on-chain, off-chain).
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 2. Quantize timestamps by snapping forward to a uniform 1-second grid.
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 3. Deduplicate within each grid point (keep only the latest event per second).
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 4. Split list-like columns (orderbook_bid, orderbook_ask, mid_prices, spreads) into multiple scalar columns.
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 5. Merge the quantized on-chain and off-chain datasets into one unified Parquet file.
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 6. Add derived features (e.g., spreads, imbalance, whale indicators).
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 7. Append prediction columns (prediction_10s \'85 prediction_240s).
\fs32 \

\fs29\fsmilli14667 \'a0\'a0 8. Calculate and append the Kelly fraction column.
\fs32 \
\'a0\

\fs29\fsmilli14667 This order ensures efficiency (quantization reduces row count before expansion), avoids forward-looking bias, and produces a dataset directly usable for the Bayesian LSTM training and paper trading pipelines.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 3.2\'a0\'a0\'a0\'a0\'a0 Repo Alignment & Implementation Updates\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 3.2.1\'a0\'a0\'a0\'a0 Synchronizing Timestamps for On-Chain and Off-Chain Data (Quantization)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 After the data collection process is complete, we obtain two separate Parquet files: one with on-chain features and one with off-chain features. Both are sampled at 200 ms intervals and use millisecond-precision timestamps as their first column. Since the two sources never align perfectly, the files must be synchronized before merging.
\f3\fs32 \

\f0\fs29\fsmilli14667 We apply 
\f1\b time quantization
\f0\b0  to map all records onto a uniform 1-second grid:
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Round-up to next second
\f0\b0 \uc0\u8232 Each timestamp is shifted forward (\'93snapped\'94) to the next exact 1-second boundary (e.g., 12:00:00.237 \u8594  12:00:01.000).\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Retain only the last record within each second
\f0\b0 \uc0\u8232 If multiple rows map to the same 1-second point, only the row with the latest original timestamp (the one closest to the boundary) is kept. All earlier rows for that second are discarded. This ensures strict causality\'97no data from the \'93future\'94 is included.\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Uniform cadence
\f0\b0 \uc0\u8232 After quantization, both files contain exactly one row per second, with identical timestamps in their first column. At this stage, the on-chain and off-chain files can be safely merged into a single Parquet file, producing a strictly causal, unbiased time series at a constant 1-second frequency.
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This procedure guarantees a strictly causal, unbiased time series at a constant 1-second cadence\'97perfect as input data for Bayesian LSTM.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf8 \'a0\cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 3.2.2\'a0\'a0\'a0\'a0 Splitting of the Columns with \'91object (list of float64)\'92 Data\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 There are four columns in the merged Parquet file that are containing data with \'91object (list of float64)\'92 data type. These columns have to be split into several separate columns in the Parquet file so that each item of each list is located to a cell in a new separate column, so that the column where the item is located corresponds to item\'92s earlier location in the list.
\fs32 \
\pard\pardeftab720\li1738\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'94orderbook_bid\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: A list of 
\f1\b bid prices
\f0\b0  from levels 2 to 10 (excluding best bid)\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: Direct from order book snapshot\u8232 \'91orderbook_bid = [entry['price'] for entry in orderbook['bids'][1:10]]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li1738\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 This column is split into 9 separate columns with the next headers:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 orderbook_bid_1\uc0\u8232 orderbook_bid_2\u8232 orderbook_bid_3\u8232 orderbook_bid_4\u8232 orderbook_bid_5\u8232 orderbook_bid_6\u8232 orderbook_bid_7\u8232 orderbook_bid_8\u8232 orderbook_bid_9\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li1738\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93orderbook_ask\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Meaning: A list of 
\f1\b ask prices
\f0\b0  from levels 2 to 10.\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: Direct from order book snapshot:\u8232 \'91orderbook_ask = [entry['price'] for entry in orderbook['asks'][1:10]]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This column is split into 9 separate columns with the next headers:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 orderbook_ask_1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_3\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_4\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_5\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_6\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 orderbook_ask_8\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 orderbook_ask_9\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li1738\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93mid_prices\'94\'a0\'a0\'a0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : List of mid-prices for levels 2 to 10.\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 Calculation: \'91mid_prices = [(bid + ask) / 2 for bid, ask in zip(orderbook_bid, orderbook_ask)]\'92\u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This column is split into 9 separate columns with the next headers:
\fs32 \

\fs29\fsmilli14667 mid_prices_1\uc0\u8232 mid_prices_2\u8232 mid_prices_3\u8232 mid_prices_4\u8232 mid_prices_5\u8232 mid_prices_6\u8232 mid_prices_7\u8232 mid_prices_8\u8232 mid_prices_9\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs32 \
\pard\pardeftab720\li1738\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl313\partightenfactor0

\fs29\fsmilli14667 \cf2 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parameter: \'93spreads\'94\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \uc0\u8232 
\f1\b Meaning
\f0\b0 : List of spreads at levels 2 to 10.\uc0\u8232 Calculation: \'91spreads = [ask - bid for ask, bid in zip(orderbook_ask, orderbook_bid)]\'92\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \u8232 Data type: \'91object (list of float64)\'92
\fs32 \
\pard\pardeftab720\li480\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This column is split into 9 separate columns with the next headers:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 spreads_1\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_2\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_3\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_4\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_5\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_6\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_7\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_8\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 spreads_9
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li480\fi-480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Additionally, the training dataset file includes the next columns (the columns number 1 to 4): 
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'91timestamp\'92
\fs32 \

\fs29\fsmilli14667 \'91trade_price\'92
\fs32 \

\fs29\fsmilli14667 \'91trade_quantity\'92
\fs32 \

\fs29\fsmilli14667 \'91trade_time\'92\uc0\u8232 \u8232 
\fs32 \

\fs29\fsmilli14667 The column 'timestamp' refers to the exact (UTC) time when the data of each row has been collected.
\fs32 \

\fs29\fsmilli14667 The column 'trade_price' shows the price of the last realized trade.
\fs32 \

\fs29\fsmilli14667 The column 'trade_quantity' shows the quantity of the last realized trade.
\fs32 \

\fs29\fsmilli14667 The column 'trade_time' refers to the exact (UTC) time when the data of each row has been collected.
\fs32 \
\'a0\

\fs29\fsmilli14667 After the splitting, the original columns with \'91object (list of float64)\'92 cells are removed from the Parquet file. Otherwise, the Bayesian LSTM model would not be able to use the Parquet file data as input data.\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 3.2.3\'a0\'a0\'a0\'a0 Merger the On-Chain and Off-Chain Parquet Files\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This merger combines the two Parquet files, one with on-chain and the other one with off-chain data in one single Parquet file. The columns that contain off-chain data should be located side by side with each other. The columns that contain on-chain data should be located side by side with each other.\'a0 The columns that contain off-chain data must be located on the left side of the table and the columns that contain on-chain data must be located on the right side of the table. The \'91time stamp\'92 data cells must be located in the first column of the merged Parquet file. 
\fs32 \

\fs29\fsmilli14667 IMPORTANT: When merging the Parquet files, we should make sure that the (earlier quantized) timestamps are identical in the corresponding rows of the Parquet files to be merged. In other words, the on-chain and off-chain data in the same row in the merged file should be originated from the rows with equal timestamps.\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 After the merger, 
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 all the columns (the first \'91time stamp\'92 column excluded) of both Parquet files must be re-located in a new Parquet file. 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 the first column of the new Parquet file is the \'91time stamp\'92 column. Because the \'91time stamp\'92 column contains identical data in both files to be merged, only one \'91time stamp\'92 column is seen in the merged file \'96 not duplicate.
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 saved data is saved in a chronological order: data with a later timestamp must always be located in the lower row. The first row of the table is for headers. 
\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\sa213\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 no empty rows, no empty columns and no empty cells under any column must be seen. This combined Parquet file is used as a training dataset file for Bayesian LSTM model. This wouldn\'92t be successful if there were any empty cells in the data region of the table.
\fs32 \
\pard\pardeftab720\li480\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The merged Parquet file is named as \'a0\'91merged_DDMMYYYY.parquet\'92.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 4\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Critical Protocol Points; Defining the \'91core_protocol.md\'92 File in Git\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Here is a draft of a 
\f1\b comprehensive core_protocol.md file contents
\f0\b0  that integrates all requirements of the most c
\f2\i ritical protocol points of the project
\f0\i0  and supplements them with essential rules from the system plan (data collection, drift prevention, modularity, reproducibility, etc.).
\fs32 \

\fs29\fsmilli14667 Below is the draft version of core_protocol.md file. It includes a built-in, programmatic 
\f1\b Pre-Commit Audit Checklist
\f0\b0  section at the end. 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.1\'a0\'a0\'a0\'a0\'a0 The Contents of \'91core_protocol.md\'92 File\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.1\'a0\'a0\'a0\'a0 Absolute System Requirements\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Modularity cap:
\f0\b0  No Python module may exceed 
\f1\b 500\'96600 lines
\f0\b0 . Keep functions short and cohesive.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Real data only:
\f0\b0  Never use mock or synthetic data in model training/evaluation.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Time standard:
\f0\b0  All timestamps are 
\f1\b UTC
\f0\b0  with 
\f1\b millisecond precision
\f0\b0  (both raw and merged datasets).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Model class:
\f0\b0  Only 
\f1\b Bayesian LSTM
\f0\b0  (MC Dropout or variational). Never standard LSTM.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Hardware policy:
\f0\b0  Training & inference on 
\f1\b GPU
\f0\b0  (CPU allowed only for orchestration/ETL glue).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.2\'a0\'a0\'a0\'a0 System Timing Parameters\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 System heartbeat:
\f0\b0  1
\f1\b -second
\f0\b0  decision cycle.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Sliding window:
\f0\b0  240 timesteps (at 1s cadence).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Prediction horizons:
\f0\b0  [10, 30, 60, 90, 120, 240] seconds (6 heads).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Historical buffer:
\f0\b0  \uc0\u8805  
\f1\b 20 minutes
\f0\b0  readily available to the model/logic.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Collection cadence:
\f0\b0  Raw 
\f1\b 200 ms
\f0\b0  on/off-chain; then aligned to a 
\f1\b 1-second
\f0\b0  grid (round-up, deduplicate by latest).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.3\'a0\'a0\'a0\'a0 Data Collection & Storage\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Sources:
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Off-chain: Binance (order book L1\'96L10, last trade).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 On-chain: Litecoin Core (full node + mempool).
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Files:
\f0\b0  
\f1\b Parquet
\f0\b0  only; new file every 
\f1\b 90 minutes
\f0\b0  to avoid save-lag gaps. Strictly increasing timestamps.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Naming:
\f0\b0  on_chain_DDMMYYYY_HHMMSS.parquet, off_chain_\'85, merged_\'85.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Object columns:
\f0\b0  Immediately 
\f1\b split lists to scalar columns
\f0\b0  before model input (e.g., orderbook_bid_1..9).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Whales:
\f0\b0  Maintain whales.json, update weekly without interrupting 200 ms capture; track net flows, counts, volumes.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.4\'a0\'a0\'a0\'a0 Merging & Feature Integrity\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Alignment:
\f0\b0  Round timestamps 
\f1\b forward
\f0\b0  to 1s; one row per second; keep 
\f1\b latest
\f0\b0  source record if multiple map to same second (no peeking).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Schema enforcement:
\f0\b0  Validate presence and types for: trade_price, L1 bid/ask, L2\'96L10 slices, spreads, mid-prices, whale metrics, mempool stats.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.5\'a0\'a0\'a0\'a0 Prediction & Kelly Columns\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Model outputs:
\f0\b0  6 parallel heads \uc0\u8594  prediction_10s \'85 prediction_240s. Save into the same row as inputs.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Kelly Fraction:
\f0\b0  Compute 
\f1\b Distributional Kelly
\f0\b0  over full 
\f1\b Gaussian distribution
\f0\b0  with SL/TP integration bounds; store as kelly_fraction. Always include 
\f1\b 0.2%
\f0\b0  transaction cost in downstream PnL.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.6\'a0\'a0\'a0\'a0 Trading Protocol\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Capital constraints:
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Single 
\f1\b source of truth
\f0\b0  for 
\f1\b Kelly variant
\f0\b0  (e.g., 75%-Kelly) and 
\f1\b max capital allocation %
\f0\b0  \'97 no parallel definitions.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Validate 
\f1\b available capital
\f0\b0  immediately before each Kelly computation. Log inputs & outputs.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Costs & slippage:
\f0\b0  Apply 
\f1\b 0.2%
\f0\b0  fees in all backtests/paper runs.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Flat rule:
\f0\b0  End each 30-minute session 
\f1\b flat
\f0\b0  (no open positions).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.7\'a0\'a0\'a0\'a0 Mathematical Verification\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Distribution check:
\f0\b0  For each horizon, confirm normality assumptions and parameter sanity (\'b5, \uc0\u963  > 0).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Kelly math:
\f0\b0  Use the 
\f1\b integral of log-growth
\f0\b0  across the Gaussian (not a discrete win/loss proxy). Validate SL/TP bounds for log domain (>0).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Auto-routing:
\f0\b0  Any code touching Bayesian inference, optimization, probability, or Kelly is 
\f1\b auto-validated
\f0\b0  by GPT-4/5 before commit.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.8\'a0\'a0\'a0\'a0 Multi-AI Orchestration & Drift Prevention\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Roles:
\f0\b0  Claude Code (implementation), GPT-4/5 (math validator), Llama (protocol/drift guardian), Python Orchestrator (router/Git gatekeeper).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Git discipline:
\f0\b0  Only the 
\f1\b orchestrator
\f0\b0  talks to GitHub; 
\f1\b no commit
\f0\b0  unless Llama signs off against this file and GPT-4/5 signs off math when triggered. Pre-commit hooks enforce immutably.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.9\'a0\'a0\'a0\'a0 Reproducibility, Logging, Success Gates\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Seeds:
\f0\b0  Use fixed set \{13, 37, 2025\} for model selection reruns.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Observability:
\f0\b0  Per-minute paper-trading logs: equity (cash+positions), 6 Kelly fractions, filled trades.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Acceptance gates (examples):
\f0\b0  Max DD \uc0\u8804  12% per 30-min session; Profit factor > 1.2 (net); Coverage within \'b13\'965% at 70\'9690%; flatness 100%.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.1.10\'a0 Pre-Commit Audit Checklist (embedded; machine-readable + human list)\cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Canonical YAML rule:
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 - id: kelly_integral_entropy_adaptive
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/**/kelly*.py"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "uses_gaussian_integral==true && uses_entropy_adaptive_weights==true && costs_bps>=20 && available_capital_validated==true"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f0\fs32 \cf2 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The orchestrator and Llama 
\f1\b must
\f0\b0  run this audit before every commit. Any 
\f1\b FAIL
\f0\b0  blocks the commit.
\f3\fs32 \
\pard\pardeftab720\sl337\sa106\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf4 \'a0
\f0\b0\fs37\fsmilli18667 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\fs32 \cf4 4.1.10.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Human-readable checklist\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Modularity: No touched Python file exceeds 600 lines.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Time discipline: All code that writes timestamps uses UTC with ms precision; merging preserves monotonic order.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Secrets: No plaintext API keys, tokens, or passwords in code/docs; .env not committed; secret scan passes.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Data realism: No mock/synthetic data in training/evaluation paths.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Model class: No introduction of non-Bayesian LSTM.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 GPU policy: Training/inference pathways set to GPU; CPU only for orchestration/ETL.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Heartbeat & window: 1-second loop, 240-step window, horizons [10,30,60,90,120,240] present and unchanged.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parquet IO: File rotation at 90 minutes; object/list columns split to scalars before any model call.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Whale tracker: whales.json usage is read-only during capture; updates scheduled & non-blocking.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Kelly single source: Kelly variant & max capital appear in one config module only; no duplicates.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Kelly math: Distributional (Gaussian) integral with SL/TP bounds; total costs \uc0\u8805  20 bps applied; available capital validated & logged.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Math validation: Any math-touched files are flagged and have GPT-4/5 validation artifacts attached.
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Flat rule: Session runner enforces end-of-session flat.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f0 \cf4 4.1.10.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Machine-readable policy (YAML)\
\pard\pardeftab720\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 \'a0\
\pard\pardeftab720\partightenfactor0
\cf9 audit_version: 2\cf2 \
\cf9 rules:\cf2 \
\cf9 \'a0 - id: max_lines_per_module\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "line_count <= 600"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: utc_millis_timestamps\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/\{collector,merger,trainer,runner\}.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "uses_utc_millisecond_precision == true"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: forbid_secrets\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**"\cf2 \
\cf9 \'a0\'a0\'a0 check: "secret_scan_passed == true && no_literals like ['API_KEY','API_SECRET','RPC_PASSWORD']"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: forbid_mock_data\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "no_imports in [faker, synth, mock_data] && no_paths like '**/mock/**'"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: model_class_is_bayesian_lstm\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/model*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "class_type in [BayesianLSTM, MCDropoutLSTM] && not contains('nn.LSTM(')"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: gpu_policy\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/train*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "device == 'cuda' && fallback=='error'"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: heartbeat_and_window\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/runner*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "heartbeat_seconds==1 && window_steps==240 && horizons==[10,30,60,90,120,240]"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: parquet_rotation_and_split\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/\{collector,merger\}*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "file_rotation_minutes==90 && object_columns_split==true"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: whales_non_blocking\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/whale*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "updates_scheduled_weekly==true && capture_loop_blocking==false"\cf2 \
\cf9 \'a0\'a0\'a0 severity: warn\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: kelly_single_source\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/\{config,settings\}*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "kelly_variant_defined_once==true && max_cap_pct_defined_once==true"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: kelly_integral_entropy_adaptive\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/kelly*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "uses_gaussian_integral==true && uses_entropy_adaptive_weights==true && costs_bps>=20 && available_capital_validated==true"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: math_validation_required\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/*.\{py\}"\cf2 \
\cf9 \'a0\'a0\'a0 check: "if contains_math_keywords then has_gpt_validation_artifact"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\cf9 \'a0\cf2 \
\cf9 \'a0 - id: flat_rule\cf2 \
\cf9 \'a0\'a0\'a0 target: "repo/**/runner*.py"\cf2 \
\cf9 \'a0\'a0\'a0 check: "enforces_end_of_session_flat==true"\cf2 \
\cf9 \'a0\'a0\'a0 severity: error\cf2 \
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f0\fs32 \cf4 4.1.10.3\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Example pre-commit hook (shell)\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 #!/usr/bin/env bash
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 set -euo pipefail
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 1) Run static protocol audit (your Python auditor reads core_protocol.md YAML)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 python -m tools.protocol_auditor --policy core_protocol.md --diff-only
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 2) Llama protocol check (drift/spec adherence)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 python -m tools.llama_guard --policy core_protocol.md --diff-only
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 3) Auto math-trigger to GPT-4/5 for touched files
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 python -m tools.math_trigger --diff-only | \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 xargs -r -n1 python -m tools.gpt_math_validate --require-pass
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 4) Block on any violation
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 echo "
\f8 \uc0\u9989 
\f7  Protocol checks passed."
\f0\fs32 \cf2 \
\pard\pardeftab720\sl306\sa53\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf4 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 4.1.10.4\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Governance & Change Control\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Changes to this file require a PR labeled protocol-change, two human reviews, and Llama + GPT math sign-off. No hotfix commits permitted.\uc0\u8232 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Operating mandate: The orchestrator and Llama must read and enforce this file on every change. Any violation blocks the commit until corrected.
\fs32 \
\'a0\

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.2\'a0\'a0\'a0\'a0\'a0 Server-Side Enforcement & GitHub Governance\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 To guarantee that no AI agent or human can bypass project rules, server-side enforcement is mandatory. Local pre-commit hooks are only advisory; the ultimate protection must be applied in GitHub itself through branch protection, required status checks, and governance policies.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.1 Protected Branches\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs32 main
\f0\fs29\fsmilli14667  and 
\f7\fs32 all release/*
\f0\fs29\fsmilli14667  branches are 
\f1\b protected
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Direct pushes are forbidden
\f0\b0 . Only the Orchestrator GitHub App may create branches and open pull requests.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Force pushes and branch deletions
\f0\b0  are disabled.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.2 Required Status Checks (CI)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Merges into protected branches are blocked unless the following checks succeed:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Llama-Guard
\f0\b0  \'97 semantic/protocol conformance against core_protocol.md.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Protocol-Auditor
\f0\b0  \'97 machine-readable rules validation.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 GPT-Math-Validate
\f0\b0  \'97 deterministic mathematical correctness validation.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Test-Suite
\f0\b0  \'97 unit/integration tests and coverage gate.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 All four checks must be 
\f1\b green
\f0\b0  before merge.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.3 Commit Integrity & Review\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 All commits on protected branches must be 
\f1\b signed
\f0\b0  (GPG or Sigstore).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 All pull requests require 
\f1\b at least one human review
\f0\b0  for non-trivial changes.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 A 
\f1\b CODEOWNERS
\f0\b0  file enforces dual human review for sensitive files (core_protocol.md, /tools/**, /policies/**).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Reviews are dismissed automatically if new commits are added.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.4 Attestation Artifacts\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Each PR must include an 
\f1\b ai_attestation.json
\f0\b0  file signed by the orchestrator, listing:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Validator versions
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Policy/rule hashes
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 File diffs with SHA256 checksums
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Timestamp of validation
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 The CI workflow must verify this signature before merge.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.5 Break-Glass Procedure\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 In emergency situations, a pull request labeled break-glass may proceed only with:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 One human approval from @mediforum/security
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Full audit entry in GOVERNANCE_LOG.md
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This procedure ensures transparency while allowing urgent fixes.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.2.6 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This chapter ensures that 
\f1\b server-side enforcement cannot be bypassed
\f0\b0 . Even if local hooks are disabled or skipped, GitHub itself will block merges that do not comply with project governance. This provides cryptographic integrity, reproducibility, and continuous alignment with the protocol.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 4.3 Cryptographic Attestations & Provenance\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 To ensure that Llama\'92s sign-off and all validator checks are 
\f1\b provable and verifiable
\f0\b0 , every orchestrator action must produce cryptographic evidence that is attached to the pull request and verified before merge.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.3.1 Signed Commits\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 All commits created by the Orchestrator GitHub App must be 
\f1\b signed
\f0\b0  using either GPG keys stored in the App\'92s secure vault or 
\f1\b Sigstore keyless signing
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Protected branches (main, release/*) only accept 
\f1\b verified signed commits
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Unsigned commits are rejected by GitHub branch protection.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.3.2 Attestation File (
\f9\fs26\fsmilli13333 ai_attestation.json
\f2\fs32 )\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Each orchestrator-generated PR must include an ai_attestation.json file containing:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Validator versions:
\f0\b0  Llama-Guard, Protocol-Auditor, GPT-Math-Validate.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Rule hashes:
\f0\b0  SHA256 of core_protocol.md and policies/*.yml.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Diff digest:
\f0\b0  SHA256 of all modified files.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Execution log:
\f0\b0  summary of which checks passed, with timestamps.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Signatures:
\f0\b0  digital signature from the Orchestrator GitHub App.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This file acts as a 
\f1\b verifiable proof
\f0\b0  that the validators actually ran on the proposed changes.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.3.3 Provenance & Verification\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI pipelines verify the attestation signature before merging.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI attaches a 
\f1\b SLSA-style provenance statement
\f0\b0  to the PR artifacts.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If verification fails, the merge is blocked.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.3.4 Immutable Governance Log\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 After each merge, a digest of the attestation file is appended to GOVERNANCE_LOG.md.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 This ensures a permanent, human-readable trail of validator activity across project history.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.3.5 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This mechanism transforms Llama\'92s 
\f1\b soft sign-off
\f0\b0  into a 
\f1\b cryptographically enforceable requirement
\f0\b0 . It guarantees that no commit can bypass validator checks without detection, and it provides both 
\f1\b machine-verifiable
\f0\b0  and 
\f1\b human-readable
\f0\b0  audit trails.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 4.4 Auth Model for the GitHub Gateway (App-Based, Least-Privilege)\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 To make \'93only the orchestrator talks to GitHub\'94 
\f1\b enforceable
\f0\b0 , the gateway runs as a 
\f1\b GitHub App
\f0\b0  (not a Personal Access Token). The App is the 
\f2\i sole
\f0\i0  actor that can create branches and open PRs; protected branches refuse merges that aren\'92t produced and attested by this App.
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.1 Why a GitHub App (not a PAT)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Least privilege & scoping:
\f0\b0  installation-scoped to specific repos; org-wide access optional but discouraged.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Key rotation & provenance:
\f0\b0  short-lived installation tokens minted from a signed JWT; no long-lived secrets.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Server-side policy compatibility:
\f0\b0  branch protection and rulesets can require statuses emitted by the App.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.2 App Identity & Allowed Actors\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 App name:
\f0\b0  Mediforum Orchestrator (example).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Allowed actors to protected branches:
\f0\b0  
\f2\i only
\f0\i0  this App (and break-glass human maintainers per \'a74.2.5).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Human users and other bots
\f0\b0  are denied direct push to main and release/*.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.3 App Permissions (minimal)\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Repository permissions
\f3\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Contents: 
\f1\b read
\f0\b0  (fetch context), 
\f1\b write
\f0\b0  (create branches/PR commits the App authored)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Pull requests: 
\f1\b write
\f0\b0  (open/update PRs, labels)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Checks/Statuses: 
\f1\b write
\f0\b0  (publish Llama-Guard, Protocol-Auditor, GPT-Math-Validate, Test-Suite)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Actions: 
\f1\b write
\f0\b0  (dispatch CI if needed)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Security events: 
\f1\b read
\f0\b0  (for secret scans)
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Account/install scope
\f3\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Restrict installation to the single repo (or a whitelisted set). No org-wide blanket.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.4 Tokening & Secret Handling\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The App holds a 
\f1\b private key
\f0\b0  stored as a GitHub Actions secret (ORCH_APP_PRIVATE_KEY).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI mints a short-lived 
\f1\b JWT \uc0\u8594  installation token
\f0\b0  at job start; tokens are not stored.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 For cloud resources (e.g., artifact signing), CI uses 
\f1\b OIDC-federated, short-lived credentials
\f0\b0  (no static cloud keys in repo).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No PATs
\f0\b0  are used anywhere in this project.
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.5 Branch Protection & Rulesets Tie-In\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Protected branches require 
\f1\b signed commits
\f0\b0  and 
\f1\b passing checks
\f0\b0  named exactly:\uc0\u8232 Llama-Guard, Protocol-Auditor, GPT-Math-Validate, Test-Suite (and Attestation-Verify if enabled).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Push restrictions:
\f0\b0  allow only the App identity; deny all others.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Review policy:
\f0\b0  at least 1 human review for non-trivial changes; CODEOWNERS required for core_protocol.md, /tools/**, /policies/**.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Linear history & conversation resolution
\f0\b0  enforced.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.6 Runtime Flow (high level)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Orchestrator prepares a change \uc0\u8594  runs local validations.
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Orchestrator (as the App) creates branch ai/<ticket>/<nonce> and opens PR.
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI (server-side) mints installation token, runs validators, produces/validates ai_attestation.json.
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If all 
\f1\b required checks
\f0\b0  pass, a human reviewer approves; merge allowed. Otherwise, blocked.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.7 Example: Mint App Token in CI (minimal)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 # Inputs: ORCH_APP_ID, ORCH_INSTALLATION_ID, ORCH_APP_PRIVATE_KEY
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 1) Create JWT
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 python - <<'PY'
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 import jwt, time, os, sys
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 payload = \{"iat": int(time.time())-60, "exp": int(time.time())+480, "iss": os.environ["ORCH_APP_ID"]\}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 print(jwt.encode(payload, os.environ["ORCH_APP_PRIVATE_KEY"].encode(), algorithm="RS256"))
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 PY
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # 2) Exchange JWT for installation token (via gh CLI or curl)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # gh api \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 #\'a0 /app/installations/$\{ORCH_INSTALLATION_ID\}/access_tokens \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 #\'a0 --method POST -H "Authorization: Bearer <JWT>" -H "Accept: application/vnd.github+json"
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 (In workflows, prefer a maintained action for GitHub App auth to avoid hand-rolling.)
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.8 Break-Glass & Revocation\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Break-glass:
\f0\b0  labeled PR requires 
\f2\i two
\f0\i0  human maintainers per \'a74.2.5; post-merge audit.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Revocation:
\f0\b0  rotate App private key immediately on suspicion; invalidate all tokens; freeze merges by marking checks as required but failing.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.9 Auditing\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Log App actor, installation ID, commit SHAs, PR numbers, and attestation digest to GOVERNANCE_LOG.md.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Retain CI artifacts (attestation + provenance) per retention policy.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.10 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This App-first model enforces \'93single gateway to GitHub,\'94 supports cryptographic provenance, and integrates cleanly with branch protection so 
\f1\b policy becomes non-bypassable
\f0\b0 .
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.5 Concurrency, Locking & Serialization (AI Task Races Made Safe)\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Multiple AI agents (and humans) may propose changes at the same time. This chapter defines the 
\f1\b only
\f0\b0  allowed way concurrent work enters the repo, how it is 
\f1\b serialized
\f0\b0 , and how conflicts are 
\f1\b detected, queued, retried,
\f0\b0  or 
\f1\b escalated
\f0\b0 \'97so that no two tasks corrupt each other or the repo state.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.1 Problem Statement\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Parallel AI tasks can race on the same files or adjacent modules, causing conflicting diffs, flaky validations, or broken builds.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Local hooks aren\'92t enough. We enforce 
\f1\b centralized orchestration with locks + leases
\f0\b0 , deterministic queues, and server-side checks.
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.2 Canonical Unit of Work\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Unit:
\f0\b0  a 
\f2\i Change Proposal
\f0\i0  (CP) that results in one 
\f1\b pull request
\f0\b0  from branch ai/<ticket>/<nonce>.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Every CP carries a 
\f1\b path manifest
\f0\b0  (list of files/dirs it intends to touch) computed before implementation (allow conservative over-approximation).
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.3 Global Coordination Primitives\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 PR-level mutex (lease):
\f0\b0  Before implementation, the orchestrator acquires a 
\f1\b lease
\f0\b0  keyed by \{repo, path_shard\}.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Lock registry:
\f0\b0  state/locks.sqlite (or Redis) stores (lock_key, holder, ttl, created_at).
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 TTL:
\f0\b0  15 minutes; 
\f1\b heartbeat:
\f0\b0  every 60 seconds; 
\f1\b auto-expire
\f0\b0  if heartbeat fails.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Lock scope:
\f0\b0  by 
\f1\b path shard
\f0\b0  (see \'a74.5.7) so unrelated areas can proceed in parallel.
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Single writer rule:
\f0\b0  For any path shard, at most one active lease across all agents.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.4 Queueing & Scheduling\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 FIFO per path shard.
\f0\b0  If a lease is unavailable, the CP is queued with queued_at timestamp.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Max concurrency:
\f0\b0  N shards in parallel (configurable). Within a shard, strictly one CP at a time.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Fairness:
\f0\b0  round-robin between shards to prevent starvation.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.5 Apply \uc0\u8594  Validate \u8594  Push: State Machine\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 A CP advances through these 
\f1\b strict states
\f0\b0 :
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 queued \uc0\u8594  waiting for lease
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 leased \uc0\u8594  lease acquired for all targeted shards
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 applied \uc0\u8594  code generated/edited locally in a temp workspace
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 rebased \uc0\u8594  auto-rebase onto latest protected branch (fast-forward only)
\f3\fs32 \

\f0\fs29\fsmilli14667 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 validated-local \uc0\u8594  local protocol checks OK
\f3\fs32 \

\f0\fs29\fsmilli14667 6.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 pushed \uc0\u8594  PR opened (ai/<ticket>/<nonce>)
\f3\fs32 \

\f0\fs29\fsmilli14667 7.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 validated-ci \uc0\u8594  CI required checks all green (Llama-Guard, Protocol-Auditor, GPT-Math-Validate, Test-Suite)
\f3\fs32 \

\f0\fs29\fsmilli14667 8.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 awaiting-review \uc0\u8594  human review / CODEOWNERS
\f3\fs32 \

\f0\fs29\fsmilli14667 9.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 merged \uc0\u8594  squash or rebase merge; linear history
\f3\fs32 \

\f0\fs29\fsmilli14667 10.
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 failed / aborted \uc0\u8594  on any hard error; lease released; PR closed or left open with label
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Rules
\f3\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No push
\f0\b0  until validated-local passes.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No merge
\f0\b0  without validated-ci green and required reviews.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Lease is 
\f1\b released
\f0\b0  on merged, aborted, or hard failed. Soft failures retry (see \'a74.5.9).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.6 Conflict Resolution Policy\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Default:
\f0\b0  
\f1\b auto-rebase
\f0\b0  CP onto the latest target branch before push and before every re-push.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Retries:
\f0\b0  up to 
\f1\b 3 automatic rebase attempts
\f0\b0  if the target branch moves.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Path overlap:
\f0\b0  if a newer CP touches any file in the current CP\'92s shard while it\'92s leased, the newer CP 
\f1\b waits
\f0\b0  (queue).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Merge commits:
\f0\b0  
\f1\b forbidden
\f0\b0  on protected branches; 
\f1\b linear history required
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 If rebase fails
\f0\b0  (true textual conflict), mark CP needs-rework, keep PR open, notify agent with conflict list.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.7 Path-Based Sharding (for Lock Keys)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Define non-overlapping shards to maximize safe parallelism:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 collectors/** (off-chain/on-chain data collectors)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 preprocessing/** (mergers, quantization, list-split)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 models/** (architecture, training, checkpoints)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 trading/** (runner, execution, risk/kelly)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 tools/**, policies/**, core_protocol.md (governance shard; 
\f1\b exclusive
\f0\b0 )
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 infra/** (Docker, CI, deploy)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 notebooks/** (analysis; separate, but still serialized if touching shared libs)
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Rule:
\f0\b0  CP must declare shards up front; the orchestrator may 
\f1\b widen
\f0\b0  the shard if import graph analysis shows transitive coupling.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.8 Serialization Inside a Shard\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Within a shard, 
\f1\b strict ordering
\f0\b0 : finish CP\uc0\u8321  (merge/abort) 
\f1\b before
\f0\b0  starting CP\uc0\u8322 \'92s applied state.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The orchestrator 
\f1\b does not
\f0\b0  run two applied states in the 
\f2\i same
\f0\i0  shard concurrently.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.9 Idempotency, Retries & Backoff\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Each CP has a 
\f1\b stable job_id
\f0\b0  and 
\f1\b idempotent
\f0\b0  workspace path.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Transient errors
\f0\b0  (rate limits, flaky network, temporary CI outage): 
\f1\b exponential backoff
\f0\b0  (1m, 3m, 7m) up to 3 retries per phase.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If CI validators are down, label PR awaiting-ci and 
\f1\b pause
\f0\b0  instead of spamming retries.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Dead letter:
\f0\b0  after exhausting retries, tag dead-letter and require human triage.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.10 Deadlock Prevention & TTLs\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Lease TTL
\f0\b0  ensures locks auto-release if an agent crashes.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Heartbeat failure
\f0\b0  (two missed beats) \uc0\u8594  orchestrator 
\f1\b revokes
\f0\b0  lease and re-queues the CP.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Circular wait is prevented by 
\f1\b sorted shard acquisition order
\f0\b0  (lexicographic). If a CP cannot acquire 
\f1\b all
\f0\b0  its shards within 2 minutes, it releases any partial locks and re-queues (avoids partial-lock deadlocks).
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.11 Human Override (Break-Glass)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If a CP blocks critical work, maintainers may apply label break-glass. The orchestrator force-releases the lock, cancels the CP, and appends an entry to GOVERNANCE_LOG.md (with job_id, shards, rationale).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.12 Observability & PR Signals\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The orchestrator 
\f1\b labels PRs
\f0\b0  to expose state:
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 state/leased, state/applied, state/validated-local, state/awaiting-ci, state/awaiting-review, state/needs-rework, state/failed
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 shard:collectors, shard:models, \'85
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 A status comment pins:
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 job_id, shard list, lock acquired at, rebase attempts, CI links, attestation digest.
\f3\fs32 \
\pard\pardeftab720\li1920\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.13 Minimal Algorithms (Reference)\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Lease acquire (all shards):
\f3\b0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 for shard in sorted(shards):
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 ok = try_lock(shard, job_id, ttl=15m)
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 if not ok:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # roll back any acquired locks to avoid partial holds
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 release_all(acquired)
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 enqueue(job_id, shards, queued_at=now)
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return QUEUED
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 return LEASED
\f3\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 Apply \uc0\u8594  Validate \u8594  Push (inside lease):\u8232 \u8232 
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 apply_changes_locally()
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 rebase_onto_latest(target="main")
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 run_local_validators()\'a0 # Llama-Guard, Protocol-Auditor, math triggers
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 if not all_passed: abort_cp("local validation failed")
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 push_branch_open_pr()
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 wait_for_ci_required_checks()
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 if checks_green and reviews_ok:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 merge_rebase_or_squash()
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 release_all_locks()
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 else:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 handle_failures_or_retry()
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 Auto-rebase loop (max 3):\uc0\u8232 \u8232 
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f7\fs29\fsmilli14667 \cf9 for i in range(1,4):
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0 if rebase_ok(): break
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0 sleep(backoff(i))
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 if not rebase_ok(): mark_needs_rework()
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.14 CI Alignment\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI jobs 
\f1\b must
\f0\b0  be safe to rerun and order-independent.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Required checks remain the same (Llama-Guard, Protocol-Auditor, GPT-Math-Validate, Test-Suite), but runners should 
\f1\b not
\f0\b0  auto-merge\'97only signal green/red; the orchestrator merges after checks + reviews.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.5.15 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This design provides 
\f1\b deterministic serialization
\f0\b0  where needed and 
\f1\b parallel speed
\f0\b0  where safe, prevents hidden races, and guarantees that 
\f1\b only one writer
\f0\b0  operates on a given subsystem at a time. It converts \'93best-effort politeness\'94 into 
\f1\b enforced mutual exclusion
\f0\b0  and auditable progress.
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f7\fs29\fsmilli14667 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.6 Failure Modes, Retries & Crash-Only Recovery\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The orchestrator must treat every operation as 
\f1\b retryable
\f0\b0  and every crash as 
\f1\b normal
\f0\b0 . All work is identified by a 
\f1\b stable job_id
\f0\b0 , stored in a 
\f1\b persisted queue
\f0\b0 , and advanced via a 
\f1\b finite state machine
\f0\b0  so the process can crash at any point and safely resume.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.1 Idempotent Job Identity\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 job_id:
\f0\b0  YYYYMMDD-HHMMSS-<uuid8>-<ticket>; immutable from creation to merge.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Artifacts keyed by job_id:
\f0\b0  temp workspace path, PR branch (ai/<ticket>/<nonce>), attestation filename, CI run name.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Reentrancy:
\f0\b0  the orchestrator 
\f2\i always
\f0\i0  loads by job_id first; if state exists, it 
\f1\b resumes
\f0\b0  instead of creating new work.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.2 Persisted Queue & State\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Queue store:
\f0\b0  state/queue.sqlite (or Redis) with tables: jobs(job_id, state, shards, created_at, updated_at, attempts_json), locks, events.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Durability:
\f0\b0  write-ahead logging (WAL) enabled; fsync on state transitions.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Replay:
\f0\b0  on startup, load any state in \{queued, leased, applied, rebased, pushed, awaiting-ci\} and continue.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.3 Crash-Only Design\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Orchestrator never tries to \'93clean up\'94 on failure; it 
\f1\b records
\f0\b0  and 
\f1\b exits
\f0\b0 . On next boot it 
\f1\b replays
\f0\b0  from persisted state.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Leases
\f0\b0  (\'a74.5) have TTLs; expired leases are reclaimed automatically.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.4 Timeouts & Backoffs (defaults)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Network/API calls (GitHub, artifact store):
\f0\b0  20s request timeout, 3 retries, backoff 2s/5s/10s.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Validator local runs:
\f0\b0  10m hard timeout per tool (Llama-Guard, Protocol-Auditor, math), kill on overrun.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 CI required checks:
\f0\b0  poll every 30s up to 45m; after 45m label PR awaiting-ci-timeout and park the job.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Git operations (fetch/rebase/push):
\f0\b0  60s timeout, 3 retries with 5s/15s/30s backoff.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 GPT-4/5 availability:
\f0\b0  see \'a74.6.6.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.5 Partial-Commit / Partial-Push Recovery\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 If local apply succeeded
\f0\b0  but push failed: keep workspace; on resume, 
\f1\b rebase \uc0\u8594  re-run local validators \u8594  push
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 If PR exists but attestation missing:
\f0\b0  recreate just the attestation & upload; do 
\f1\b not
\f0\b0  re-open PR.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 If some checks reported:
\f0\b0  re-query CI; never assume stale results; move forward only on explicit green.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.6 GPT-4/5 Unavailable (Validator Degradation)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Treat GPT validation as 
\f1\b required
\f0\b0  unless explicitly marked \'93not needed\'94 by math-trigger.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 On HTTP 5xx/timeouts:
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Retry 
\f1\b 3 times
\f0\b0  with backoff 
\f1\b 1m, 3m, 7m
\f0\b0 .
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 If still failing: label PR awaiting-gpt-validator, park job, emit event to ops channel.
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 On 
\f1\b prolonged outage
\f0\b0  (>6h): maintainers may apply break-glass (see \'a74.2.5) to proceed with explicit human math review.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.7 CI Outage / Degraded State\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If GitHub Actions status is degraded:
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Do not open new PRs; queue jobs with label queued/ci-down.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 For existing PRs in awaiting-ci, extend polling to 
\f1\b 6h
\f0\b0  with 5-minute cadence.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 If still no results: mark awaiting-ci-timeout and park.
\f3\fs32 \
\pard\pardeftab720\li1920\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.8 Error Classes & Policy\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Transient
\f0\b0  (rate limit, network, 5xx): retry with exponential backoff (cap 10m).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Content
\f0\b0  (lint/protocol/math failing): 
\f1\b no retry
\f0\b0 ; move to needs-rework, keep PR open with actionable comment.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Conflict
\f0\b0  (rebase failure): 
\f1\b 3 auto-rebase attempts
\f0\b0 ; then needs-rework.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Infrastructure
\f0\b0  (disk full, DB locked): escalate to ops; auto-retry every 10m up to 2h; then dead-letter.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.9 Dead-Letter Queue\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 After exhausting policy retries, move job to dead-letter with root cause, last logs, and file list. Human triage required.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.10 State Machine (augments \'a74.5.5)\
\pard\pardeftab720\li480\sa320\partightenfactor0

\f7\i0\fs26\fsmilli13333 \cf9 queued \uc0\u8594  leased \u8594  applied \u8594  rebased \u8594  validated-local
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \uc0\u8594  pushed \u8594  awaiting-ci \u8594  validated-ci \u8594  awaiting-review \u8594  merged
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0 
\f8 \uc0\u8600 
\f7  needs-rework / failed / dead-letter
\f3\fs32 \cf2 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Transitions are atomic
\f0\b0  in queue.sqlite. Each transition appends an events row with timestamp and summary.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.11 PR Labels & Telemetry\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 State labels:
\f3\b0\fs32  
\f7\fs26\fsmilli13333 state/queued
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/leased
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/applied
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/awaiting-ci
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/awaiting-review
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/needs-rework
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/failed
\f3\fs32 , 
\f7\fs26\fsmilli13333 state/dead-letter
\f3\fs32 .\uc0\u8232 \u8232 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Cause labels:
\f3\b0\fs32  
\f7\fs26\fsmilli13333 err/transient
\f3\fs32 , 
\f7\fs26\fsmilli13333 err/math
\f3\fs32 , 
\f7\fs26\fsmilli13333 err/protocol
\f3\fs32 , 
\f7\fs26\fsmilli13333 err/conflict
\f3\fs32 , 
\f7\fs26\fsmilli13333 err/infra
\f3\fs32 , 
\f7\fs26\fsmilli13333 awaiting-gpt-validator
\f3\fs32 , 
\f7\fs26\fsmilli13333 awaiting-ci-timeout
\f3\fs32 .\uc0\u8232 \u8232 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Pinned comment:
\f3\b0\fs32  
\f7\fs26\fsmilli13333 job_id
\f0\fs29\fsmilli14667 , time in state, last attempt count, CI links, attestation digest.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.12 Observability & Alerts\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Emit structured logs for 
\f1\b every state change
\f0\b0 ; ship to a log sink.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Pager/alerts on: GPT validator outage > 30m; CI backlog > 50 PRs; lock starvation > 15m; dead-letter additions.
\f3\fs32 \
\pard\pardeftab720\li480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.6.13 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This policy makes the workflow 
\f1\b safe under failure
\f0\b0 , 
\f1\b repeatable
\f0\b0 , and 
\f1\b auditable
\f0\b0 . Jobs never vanish, no step is assumed to succeed, and every path is either 
\f1\b retried
\f0\b0 , 
\f1\b parked with a visible label
\f0\b0 , or 
\f1\b escalated
\f0\b0 .
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.7 CI Wiring: Server-Side Validators & Required Checks\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 This chapter binds our validators to 
\f1\b GitHub Actions
\f0\b0  so protected branches reject merges unless CI proves compliance.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.1 Required Check Names (must match Branch Protection)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The following 
\f1\b exact
\f0\b0  check names are emitted by CI and must be configured as 
\f2\i required
\f0\i0  on main and release/*:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Llama-Guard
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Protocol-Auditor
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 GPT-Math-Validate
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Test-Suite
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Attestation-Verify (if attestations enabled per \'a74.3)
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.2 Secrets & Auth\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI authenticates as the 
\f1\b Orchestrator GitHub App
\f0\b0  (see \'a74.4).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Secrets: ORCH_APP_ID, ORCH_INSTALLATION_ID, ORCH_APP_PRIVATE_KEY (for App auth), plus any signing secrets for attestation (Sigstore keyless preferred).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.3 Minimal CI Workflows (add to repo)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 File: 
\f7 .github/workflows/policy-and-math.yml
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Runs on every PR to protected branches and on pushes to non-protected feature branches.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 name: policy-and-math
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 on:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 pull_request:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 branches: [ "main", "release/**" ]
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 push:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 branches-ignore: [ "main", "release/**" ]
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 jobs:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Llama-Guard:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: python -m tools.llama_guard --policy core_protocol.md --diff-only
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Protocol-Auditor:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: python -m tools.protocol_auditor --policy core_protocol.md --rules policies/rules.yml --diff-only
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 GPT-Math-Validate:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - id: trigger
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: python -m tools.math_trigger --diff-only > triggered.txt || true
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - if: $\{\{ hashFiles('triggered.txt') != '' \}\}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: |
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while read path; do
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 [ -z "$path" ] && continue
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 python -m tools.gpt_math_validate --file "$path" --require-pass
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 done < triggered.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - if: $\{\{ hashFiles('triggered.txt') == '' \}\}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: echo "No math validation needed."
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Test-Suite:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pytest -q
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: coverage run -m pytest && coverage xml
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: python -m tools.coverage_gate --min 70
\f3\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 File: 
\f7 .github/workflows/attestation-verify.yml
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Verifies ai_attestation.json (from \'a74.3) and publishes provenance.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 name: attestation-verify
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 on:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 pull_request:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 branches: [ "main", "release/**" ]
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 jobs:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Attestation-Verify:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: python -m tools.attestation_verify --file ai_attestation.json --require-signature
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: python -m tools.provenance_emit --from ai_attestation.json --out provenance.json
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/upload-artifact@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 name: provenance
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 path: provenance.json
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.4 Paths Filters (optional but recommended)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 If you want to scope when jobs run, add paths to each job (e.g., run math checks only if **/*.py or policies/** changed). Keep the 
\f1\b check names
\f0\b0  the same to satisfy required-checks.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.5 Merge Policy Tie-In\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Branch protection (see \'a74.2) must require all five checks above.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI 
\f1\b does not auto-merge
\f0\b0 ; the orchestrator merges only after checks pass and reviews are complete.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.7.6 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This wiring makes the earlier \'93hooks\'94 enforceable on the server: PRs simply cannot merge without passing protocol, Llama guard, math validation (when triggered), tests, and attestation verification.
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf9 \'a0
\fs32 \cf2 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.8 Prompt-Injection Defense & Data-Egress Policy\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Cloud AIs (GPT-4/5, Claude) must receive 
\f1\b only the minimal redacted context
\f0\b0  necessary to do the task. Llama (local) acts as the 
\f1\b egress gate
\f0\b0 : it scrubs, downsamples, and approves context before anything leaves the machine. This chapter defines 
\f1\b what may be sent
\f0\b0 , 
\f1\b what must be redacted
\f0\b0 , and 
\f1\b how prompts are constructed
\f0\b0  to resist prompt-injection.
\f3\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i\fs32 \cf4 4.8.1 Roles & Flow (who sees what)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Producer (Claude Code)
\f0\b0  proposes diffs locally.
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Llama Prompt-Guard
\f0\b0  (local) enforces allowlists/denylists, redacts secrets, and 
\f1\b minimizes
\f0\b0  context \uc0\u8594  produces a 
\f2\i sanitized prompt package
\f0\i0 .
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Cloud AI (GPT-4/5 or Claude)
\f0\b0  receives 
\f1\b only
\f0\b0  the sanitized package.
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Orchestrator
\f0\b0  verifies outputs (no secrets, no policy violations) before commit/PR.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Hard rule:
\f0\b0  No raw files, datasets, or environment dumps are sent upstream. Only 
\f1\b diff-level snippets
\f0\b0  + minimal structural metadata.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.2 Allowlist (what MAY be sent to cloud AIs)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Unified diff snippets
\f0\b0  for the exact files being discussed (max N lines per hunk; see \'a74.8.6).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 File lists
\f0\b0  (filenames + sizes, no paths above repo root).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Non-sensitive metrics/log fragments
\f0\b0  (e.g., test failure messages without stack traces that reveal paths/secrets).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Extracted code blocks
\f0\b0  necessary for analysis (functions/classes) with line-number ranges, not entire files.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Machine-readable policy excerpts
\f0\b0  (specific rule IDs from core_protocol.md / policies/*.yml, not entire files).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.3 Denylist (what MUST NOT be sent)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Secrets of any kind
\f0\b0 : API keys, tokens, passwords, private keys, .env contents, kube/docker credentials. 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Datasets / Parquet content
\f0\b0  (on/off-chain raw rows).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Full config files
\f0\b0  with endpoints or secret placeholders beyond what\'92s strictly necessary.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Proprietary model weights/artifacts
\f0\b0 ; send only hashes/metadata.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 System paths, usernames, internal IPs/hosts
\f0\b0 , or detailed stack traces revealing these.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.4 Redaction Rules (pre-egress scrubbing by Llama)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Llama Prompt-Guard applies 
\f1\b multi-pass redaction
\f0\b0  before any cloud call:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Key/secret patterns:
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 (?i)(api|secret|token|password|key)[^\\\\n:=]\{0,40\}[:=]\\\\s*['"]?[A-Za-z0-9._\\\\-]\{12,\}['"]?
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 PEM blocks, JWTs (eyJ[a-zA-Z0-9_-]\{10,\}\\\\.[a-zA-Z0-9_-]\{10,\}\\\\.[a-zA-Z0-9_-]\{10,\})
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 .env / credentials:
\f0\b0  Entire lines removed; replace with REDACTED_ENV_LINE.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Paths & hosts:
\f0\b0  Replace /home/*, C:\\Users\\*, internal domains/IPs with REDACTED_PATH/HOST.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Timestamps/IDs
\f0\b0 : Keep unless they reveal PII; otherwise hash as ID_SHA256[:8].
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Long literals
\f0\b0  (>256 chars) are replaced by REDACTED_BLOB(len=\'85).
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 All redactions are 
\f1\b logged locally
\f0\b0  (counts only, never the raw value).
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.5 Context Minimization (diff-first; smallest-necessary)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Before any cloud call, Llama reduces context to:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Diff-only
\f0\b0  snippets (\'b1K lines context; default K=6).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If function/class context is needed: 
\f1\b extract that block only
\f0\b0 , no full file.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Rule subset
\f0\b0 : include only the 
\f1\b specific rule IDs
\f0\b0  referenced by the change.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Conversation compression
\f0\b0 : summarize earlier steps into a bullet digest (never resend raw conversation logs).
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 If the minimal package exceeds budget, apply 
\f1\b priority truncation
\f0\b0 : (1) diff body, (2) target function/class, (3) rule IDs, (4) tiny build logs. Discard everything else.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.6 Size & Frequency Limits\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Max upstream payload
\f0\b0  per request: 64 KB (post-redaction).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Max diff lines
\f0\b0 : 400. If exceeded, split into 
\f1\b per-file
\f0\b0  prompts.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Rate limit
\f0\b0  per job: \uc0\u8804  10 calls to any single cloud model.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.7 Prompt-Injection Defense (construction rules)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 System prompt
\f0\b0  (fixed): restates this policy; instructs model to 
\f1\b ignore any user/file content
\f0\b0  attempting to change policies, request secrets, or exfiltrate data.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 User prompt
\f0\b0  (structured):
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 \'93Task\'94 \uc0\u8594  concise instruction (e.g., 
\f2\i validate integral bounds in kelly_gaussian.py
\f0\i0 ).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 \'93Context\'94 \uc0\u8594  redacted diff/function block + rule IDs.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 \'93Constraints\'94 \uc0\u8594  explicit 
\f1\b DO NOT
\f0\b0  list (no tool use, no external links, no instructions that alter this policy).
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Refusal hooks:
\f0\b0  If model asks for more context than allowed, answer with 
\f1\b policy-compliant summary
\f0\b0 , not raw content.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.8 Model-Specific Rules\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Llama (local):
\f0\b0  Full codebase access permitted for 
\f1\b guarding tasks only
\f0\b0 ; never calls external endpoints.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 GPT-4/5 (cloud):
\f0\b0  Receives only sanitized prompt packages; no tool execution; 
\f1\b no browsing
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Claude (cloud):
\f0\b0  Same as GPT; may implement code 
\f2\i only
\f0\i0  from minimal snippets and rule prompts.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.9 Tooling: 
\f9 tools/prompt_guard
\f2  (policy-as-code)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The orchestrator invokes:
\f3\fs32 \
\pard\pardeftab720\partightenfactor0

\f7\fs29\fsmilli14667 \cf2 python -m tools.prompt_guard \\
\fs26\fsmilli13333 \

\fs29\fsmilli14667 \'a0 --allowlist policies/prompt_allow.yml \\
\fs26\fsmilli13333 \

\fs29\fsmilli14667 \'a0 --denylist policies/prompt_deny.yml \\
\fs26\fsmilli13333 \

\fs29\fsmilli14667 \'a0 --redact\'a0\'a0 policies/redactions.yml \\
\fs26\fsmilli13333 \

\fs29\fsmilli14667 \'a0 --in\'a0\'a0\'a0\'a0\'a0\'a0 prompt_pkg_raw.json \\
\fs26\fsmilli13333 \

\fs29\fsmilli14667 \'a0 --out\'a0\'a0\'a0\'a0\'a0 prompt_pkg_sanitized.json
\fs26\fsmilli13333 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Fails closed on any violation; emits a 
\f1\b mask report
\f0\b0  (counts only).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Adds a 
\f1\b content hash
\f0\b0  of the sanitized package; this hash is stored in ai_attestation.json (\'a74.3).
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 CI tie-in:
\f0\b0  Llama-Guard job verifies that any cloud-validated change includes a 
\f1\b matching prompt-package hash
\f0\b0  (proves the exact sanitized context was used).
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.10 Policy Files (examples)\
\pard\pardeftab720\sa320\partightenfactor0

\f7\i0\fs29\fsmilli14667 \cf2 policies/prompt_allow.yml
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 diff_snippets: true
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 function_blocks: true
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 rule_ids: true
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 file_lists: true
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 metrics_summaries: true
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs29\fsmilli14667 \cf2 policies/prompt_deny.yml
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 .env, **/config/**, **/secrets/**, **/*.parquet, data/**, **/models/*.pt
\f0 , stack traces with absolute paths
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 policies/redactions.yml
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Regex sets for keys/tokens/passwords, JWTs, PEM blocks, IPs/hosts, absolute paths, long literals.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.11 Output Filtering (post-response scrub)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 All model outputs are scanned locally before use:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Deny any content that 
\f1\b requests secrets
\f0\b0 , asks to 
\f1\b weaken policy
\f0\b0 , or attempts to 
\f1\b self-modify
\f0\b0  restrictions.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Re-run redactions on outputs; if anything would violate policy on commit/PR comments, 
\f1\b block
\f0\b0  and label err/prompt-egress.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.12 Governance & Tests\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Add 
\f1\b unit tests
\f0\b0  for tools.prompt_guard redaction & allow/deny logic.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Include 
\f1\b attack fixtures
\f0\b0  (prompt-injection samples) and assert they are neutralized.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Make 
\f1\b Llama-Guard
\f0\b0  (which now includes Prompt-Guard) a 
\f1\b required status check
\f0\b0  (already listed in \'a74.2/4.7).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.8.13 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This chapter converts \'93be careful with prompts\'94 into 
\f1\b enforceable policy
\f0\b0 : minimal context, deterministic redaction, cryptographic linkage to what the AI actually saw, and CI-enforced checks. It prevents accidental exfiltration of secrets and resists prompt-injection attempts. 
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.9 Secrets & Environments: Zero-Trust Credentials, OIDC, and Egress Controls\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 This chapter makes secrets management 
\f1\b enforceable
\f0\b0  and 
\f1\b auditable
\f0\b0 . All credentials are short-lived, least-privilege, never committed to the repo, and never sent to cloud AIs. CI uses 
\f1\b OIDC-based identity
\f0\b0  to fetch temporary tokens at job runtime. Validators run with 
\f1\b egress allowlists
\f0\b0  (default-deny).
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.1 Principles\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No secrets in code or repo
\f0\b0  (including docs and PR comments).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Short-lived tokens only
\f0\b0  (minutes/hours), minted at runtime via OIDC.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Least privilege
\f0\b0  per environment (dev/test/prod).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Default-deny egress
\f0\b0  for validation jobs; explicit allowlists only.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Never send secrets or raw configs to cloud AIs
\f0\b0  (see \'a74.8).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.2 Secret Lifecycle & Storage\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Authoritative store:
\f0\b0  A managed secrets manager (e.g., AWS Secrets Manager / GCP Secret Manager / Azure Key Vault).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Owners:
\f0\b0  @mediforum/security.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Rotation:
\f0\b0  automatic every 90 days; on exposure, rotate 
\f1\b immediately
\f0\b0  and invalidate old creds.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Naming convention:
\f3\b0\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 prod/binance/api_key, prod/binance/api_secret
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 prod/ltc/rpc_user, prod/ltc/rpc_password
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 mirrored for test/* and dev/*.
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Access policy:
\f0\b0  Separate IAM principals per environment; prod secrets 
\f1\b not
\f0\b0  visible to dev/test.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.3 CI Authentication via OIDC (no static keys)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 GitHub Actions (or your CI) uses 
\f1\b OIDC federation
\f0\b0  to request a short-lived token from the cloud provider at job start.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The cloud provider 
\f1\b trusts
\f0\b0  the repo+branch via an 
\f1\b OIDC trust policy
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 CI then 
\f1\b reads only the needed secrets
\f0\b0  for that workflow scope.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No PATs; no long-lived cloud keys
\f0\b0  in repo or CI secrets.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Skeleton (illustrative):
\f3\b0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 # In your workflow before reading secrets:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - name: Federate with cloud (OIDC)
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 uses: cloud/oidc-auth-action@v1
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 with:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 audience: github
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 # Outputs a short-lived access token bound to repo/ref
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - name: Read secrets (prod/test/dev)
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 run: |
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 ./tools/secret_fetch --env $ENV \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 --name binance/api_key --out BINANCE_API_KEY \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 --name binance/api_secret --out BINANCE_API_SECRET \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 --name ltc/rpc_user --out LTC_RPC_USER \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 --name ltc/rpc_password --out LTC_RPC_PASSWORD
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.4 Local Development & Templates\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Devs use secrets.dev.json 
\f1\b outside the repo
\f0\b0  (never committed).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Provide 
\f1\b templates
\f0\b0  only: .env.example, secrets.example.json.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Pre-commit & CI 
\f1\b secret scanners
\f0\b0  (see \'a74.9.8) block accidental commits.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.5 Environment Separation (dev/test/prod)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Config split:
\f0\b0  configs/\{dev,test,prod\}.yml (no secrets inside).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Hard guards:
\f0\b0  prod tokens can 
\f1\b only
\f0\b0  be minted on protected branches (main, release/*) and in the prod deploy workflows.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Data isolation:
\f0\b0  distinct cloud projects/buckets/DBs per environment; read-only mirrors from prod to lower envs when needed (sanitized).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.6 Network Egress Allowlists (Validators & CI)\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Default deny:
\f0\b0  validation jobs (Llama-Guard, Protocol-Auditor, GPT-Math-Validate, tests) run in a 
\f1\b network-restricted
\f0\b0  context.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Allow only:
\f3\b0\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Git provider API (for status updates)
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Package registries (pin to official endpoints)
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Secrets manager endpoint (read only)
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Explicitly deny:
\f0\b0  outbound access to exchanges, RPC nodes, external data sources, and 
\f1\b all
\f0\b0  non-allowlisted hosts during validation.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Apply via runner firewall rules or CI job-level network policies.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.7 Runtime Secret Handling\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Secrets are 
\f1\b injected at runtime
\f0\b0  (env vars/process memory) and 
\f1\b never
\f0\b0  written to disk or logs.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Redaction middleware scrubs keys from logs; prompts to cloud AIs are sanitized per \'a74.8.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Processes must 
\f1\b zeroize
\f0\b0  sensitive buffers on shutdown when feasible.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.8 Secret Scanning & Blocking\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Add a 
\f1\b required CI check
\f0\b0  Secret-Scan that runs on every PR and push:
\f3\fs32 \
\pard\pardeftab720\li1440\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Tools: e.g., trufflehog/gitleaks + git history scan on changed ranges.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Block the PR on any hit; 
\f1\b never
\f0\b0  whitelist real keys.
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Local pre-commit hook runs the same scanners (advisory; CI is authoritative).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.9 Auditing & Monitoring\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Log which principal accessed which secret (and when).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Alerts on: secret access from unexpected branches, repeated fetch failures, or attempts to fetch 
\f1\b prod
\f0\b0  secrets in non-prod workflows.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Quarterly audit: enumerate all secrets, last rotation time, consumers, and IAM policies.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.9.11 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This design eliminates long-lived keys, prevents secret sprawl, constrains validator egress, and guarantees that 
\f1\b even if someone tries to commit or exfiltrate credentials, CI and policy stop it
\f0\b0 . It also addresses existing plaintext key exposure by requiring 
\f1\b rotation + history purge
\f0\b0 .
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 \'a0\
4.10 Human Override (\'93Break-Glass\'94) \'97 Policy, Process & Audit\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Purpose.
\f0\b0  Define a strictly limited, auditable path to deploy or merge when normal gates are unavailable (e.g., validator outage, urgent prod fix). Break-glass is 
\f1\b exceptional
\f0\b0 , 
\f1\b time-boxed
\f0\b0 , and 
\f1\b minimally scoped
\f0\b0 .
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.10.1 Eligibility & Triggers\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Break-glass may be invoked only when 
\f1\b all
\f0\b0  are true:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 A critical incident or blocker exists (security, data loss risk, trading safety, or validator/CI outage).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Normal path (validators/tests) is unavailable or would cause unacceptable delay.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 A 
\f1\b Rollback Plan
\f0\b0  is documented and feasible within the time window.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Ineligible:
\f0\b0  feature work, refactors, or convenience merges.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.10.2 Authority & Approvals\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Required:
\f0\b0  
\f1\b one
\f0\b0  human maintainer from @mediforum/security (or designated governance group) must approve the PR labeled break-glass.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Approvers must be 
\f1\b independent
\f0\b0  of the author.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Llama\'92s automated review still runs if available; otherwise, document why it\'92s bypassed.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 4.11 Non-Python Coverage: Notebooks, Configs, and Binary Assets\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 To prevent policy blind spots, the protocol applies to 
\f1\b Jupyter notebooks (.ipynb)
\f0\b0 , 
\f1\b configs
\f0\b0  (.yml/.yaml/.json/.toml), and 
\f1\b binary/model artifacts
\f0\b0 . These files are validated, size-gated, and (for models) attested just like Python code.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.1 Jupyter Notebooks (
\f9\fs26\fsmilli13333 /notebooks/**.ipynb
\f2\fs32 )\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Purpose:
\f0\b0  Notebooks are for exploration and reports only; they are 
\f1\b not
\f0\b0  the source of truth for production code.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Location & ownership
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 All notebooks live under notebooks/. Production code must be .py modules outside notebooks/.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 A paired 
\f1\b Jupytext
\f0\b0  mapping (.ipynb \uc0\u8596  .py) is required for any executable logic.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Policy (must pass CI)
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Outputs stripped
\f0\b0  (no execution results committed).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Trusted = false
\f0\b0  in metadata; no embedded widgets/base64 > 64 KB.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Kernel pinned
\f0\b0  to python3 with version header.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 nbformat
\f0\b0 /metadata validated; 
\f1\b cell count \uc0\u8804  1,000
\f0\b0 ; 
\f1\b file size \uc0\u8804  5 MB
\f0\b0 .
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 No secrets
\f0\b0  (same scanners as code).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 If a notebook introduces functions/classes \uc0\u8594  the paired .py file in src/ must be updated in the same PR.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Rationale:
\f0\b0  Prevents prompt-injection via hidden outputs, keeps diffs clean, and routes production logic through reviewed Python modules.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.2 Config Files (
\f9\fs26\fsmilli13333 configs/**.\{yml,yaml,json,toml\}
\f2\fs32 )\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Purpose:
\f0\b0  Make behavior reproducible and reviewable.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Schema validation:
\f0\b0  Every config has a matching JSON Schema in schemas/** and must pass validation in CI.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 No secrets:
\f0\b0  Configs may reference 
\f1\b secret names
\f0\b0  only (e.g., secret: prod/binance/api_key)\'97never values.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Immutability for prod:
\f0\b0  configs/prod.* changes require 
\f1\b CODEOWNERS
\f0\b0  approval and dual review.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Diff linting:
\f0\b0  Keys must be alphabetized; unknown keys rejected; comments allowed but not required.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.3 Binary & Model Assets (
\f9\fs26\fsmilli13333 models/**
\f2\fs32 , 
\f9\fs26\fsmilli13333 assets/**
\f2\fs32 )\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Purpose:
\f0\b0  Ensure large files and weights are versioned, checked, and auditable.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Storage & size
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Use 
\f1\b Git LFS
\f0\b0  for any file > 5 MB. Hard cap: 
\f1\b single file \uc0\u8804  200 MB
\f0\b0  in Git; larger via artifact store/registry.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Allowed types:
\f0\b0  .pt, .pth, .onnx, .bin, .gz, .zip, .json (metadata), .md (cards).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 Forbidden in Git:
\f0\b0  datasets (.parquet, .csv, raw dumps) \'97 use data storage buckets only.
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Versioning
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Models live under models/<name>/<semver>/ (e.g., models/bayesian_lstm/1.2.0/).
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Each version directory must include:
\f3\fs32 \
\pard\pardeftab720\li2880\fi-480\sa320\partightenfactor0

\f10\fs26\fsmilli13333 \cf2 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 MODEL_CARD.md (purpose, metrics, data slice, risks, license),
\f3\fs32 \

\f10\fs26\fsmilli13333 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 checksums.txt (SHA256 per file),
\f3\fs32 \

\f10\fs26\fsmilli13333 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 provenance.json (training commit SHA, data snapshot hash, tool versions),
\f3\fs32 \

\f10\fs26\fsmilli13333 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 signatures/ (Sigstore/GPG attestations).
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Promotion gates
\f3\b0\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 dev \uc0\u8594  test \u8594  prod
\f0\b0  promotion via PRs only; each step requires updated metrics and sign-off.
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 No overwrite:
\f0\b0  existing version dirs are immutable; bump semver for any change.
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.4 New Policy-as-Code Rules (append to \'a74.1.10.2)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Your current rules mostly target repo/**/*.py; this extends them across notebooks, configs, and assets. 
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 # Notebooks
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: ipynb_outputs_stripped
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/notebooks/**/*.ipynb"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "jupyter.outputs_stripped == true && jupyter.trusted == false && file_size_mb <= 5"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: ipynb_has_jupytext_pair
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/notebooks/**/*.ipynb"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "has_jupytext_pair_in('src/**') == true"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: ipynb_no_secrets
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/notebooks/**/*.ipynb"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "secret_scan_passed == true && no_embedded_base64_over_kb==64"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # Configs
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: config_schema_validation
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/configs/**/*.\{yml,yaml,json,toml\}"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "validated_against_schema == true && unknown_keys == []"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: config_no_secrets
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/configs/**/*.\{yml,yaml,json,toml\}"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "contains_secret_values == false"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # Binary/Models
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: datasets_forbidden_in_git
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/**"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "no_paths like ['**/*.parquet','**/*.csv','data/**','datasets/**']"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: model_asset_policy
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/models/**"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "uses_git_lfs_for_large==true && single_file_mb<=200 && has_files ['MODEL_CARD.md','checksums.txt','provenance.json']"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: model_version_immutable
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/models/*/*"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "if version_exists then no_overwrite == true"
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f3\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.5 CI Wiring (add jobs to 
\f9\fs26\fsmilli13333 .github/workflows/policy-and-math.yml
\f2\fs32 )\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0 Notebook-Policy:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install nbformat nbstripout nbqa jsonschema tomli
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Validate notebooks
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: python -m tools.nb_policy --path notebooks --max-mb 5 --require-jupytext
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Strip outputs (verify clean)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: nbstripout --check --install && git diff --exit-code
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Config-Schema:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install jsonschema pyyaml tomli
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Schema validate configs
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: python -m tools.config_schema --schemas schemas --configs configs
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Asset-Policy:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Enforce LFS and size caps
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: python -m tools.asset_policy --models models --max-mb 200 --require-model-card
\f0\fs32 \cf2 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Add these three check names as 
\f1\b required
\f0\b0  in branch protection alongside your existing ones.
\f3\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.6 Repo Plumbing\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Jupytext mapping (.jupytext.toml):
\f3\b0\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 formats = "ipynb,py:percent"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 notebook_directories = ["notebooks"]
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 paired_paths = "notebooks/\{notebook\}.ipynb|src/\{notebook\}.py"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Strip outputs by default:
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 nbstripout --install
\f0\fs32 \cf2 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 .gitattributes
\f0  
\fs29\fsmilli14667 for LFS & cleanliness:
\fs32 \uc0\u8232 \u8232 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 # Models via LFS
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 models/**/* filter=lfs diff=lfs merge=lfs -text
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 # Block data files from entering Git
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 *.parquet -text linguist-generated
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 *.csv\'a0\'a0\'a0\'a0 -text linguist-generated
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 data/**\'a0\'a0 -text linguist-generated
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 CODEOWNERS (extend):
\f3\b0\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 notebooks/**\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @mediforum/research-governance
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 configs/**\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @mediforum/security
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 models/**\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @mediforum/research-governance @mediforum/security
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 schemas/**\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @mediforum/research-governance
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.7 Explicit Exclusions (with rationale)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Raw datasets
\f0\b0  (data/**, **/*.parquet, **/*.csv) are excluded from Git to reduce repo bloat and prevent accidental PII/secret leakage. Use the data bucket and reference snapshots by 
\f1\b hash
\f0\b0  in configs.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Temporary notebooks
\f0\b0  (*_scratch.ipynb) allowed in PRs but must still be 
\f1\b output-stripped
\f0\b0  and cannot touch secrets.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Large model training artifacts
\f0\b0  (>200 MB) stored in the external registry; only 
\f1\b metadata, checksums, and pointers
\f0\b0  live in Git.
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.11.8 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Your current rules (e.g., target: "repo/**/*.py") protect Python well but 
\f1\b don\'92t constrain notebooks, configs, or models
\f0\b0 , which are common vectors for regressions, secret leakage, or bloat. This chapter closes those gaps with 
\f1\b schema checks, notebook hygiene, and asset governance
\f0\b0 \'97all enforced server-side.
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf9 \'a0
\fs32 \cf2 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.12 Testing, Calibration & Quality Gates (Merge-Blocking)\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Goal.
\f0\b0  Even if protocol/maths pass, no change may merge unless the codebase is functionally sound, 
\f1\b statistically calibrated
\f0\b0 , and 
\f1\b trading-safe
\f0\b0 .
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.1 Test Taxonomy & Layout\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Unit tests
\f0\b0 : tests/unit/** (pure functions, utilities, feature engineering).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Integration tests
\f0\b0 : tests/integration/** (data merge \uc0\u8594  model \u8594  kelly \u8594  runner).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Backtest tests
\f0\b0 : tests/backtest/** (short fixtures; asserts on PF/DD/flatness).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Calibration tests
\f0\b0 : tests/calib/** (probabilistic reliability & coverage).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Seeds
\f0\b0 : use \{13, 37, 2025\} consistently (already in plan). 
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.2 Calibration Gates (Bayesian LSTM outputs)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 For every horizon in [10, 30, 60, 90, 120, 240]:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Coverage@(70%, 90%)
\f0\b0 : empirical coverage within 
\f1\b \'b13\'965%
\f0\b0  of nominal (configurable per horizon). (Aligns with your acceptance notes.) 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Reliability slope/intercept
\f0\b0 : |slope\uc0\u8722 1| \u8804  0.15, |intercept| \u8804  0.05 on reliability curve.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Brier (regression proxy)/CRPS
\f0\b0 : must be \uc0\u8804  last released model + tolerance (calib_tolerance.yml).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 PIT Uniformity
\f0\b0 : KS test p-value \uc0\u8805  0.05 (warn at 0.01\'960.05).
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 If any horizon fails, the 
\f1\b Calibration-Gates
\f0\b0  CI check fails \uc0\u8594  
\f1\b merge blocked
\f0\b0 .
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.3 Trading Safety Gates (micro backtest)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Using your existing acceptance ideas (PF & drawdown) as merge gates:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Profit Factor (net)
\f0\b0  \uc0\u8805  
\f1\b 1.2
\f0\b0  on the 24-hour micro fixture.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Max Drawdown
\f0\b0  \uc0\u8804  
\f1\b 12%
\f0\b0  over the same run.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Flatness
\f0\b0 : runner ends flat at each 30-min session boundary (already in plan). 
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.4 Coverage & Mutation\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Line coverage
\f0\b0  \uc0\u8805  
\f1\b 70%
\f0\b0  repo-wide (gate already referenced in your CI draft). 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Mutation score
\f0\b0  (optional but recommended): \uc0\u8805  
\f1\b 60%
\f0\b0  on src/kelly/** and src/models/**.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.5 Fixtures & Speed\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Tiny snapshot
\f0\b0  parquet fixtures in tests/_fixtures/ (sanitized, no secrets).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Backtests capped at 
\f1\b 90s
\f0\b0  runtime; use 1-day slice with pre-rolled signals.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 GPU optional; CI fallback to CPU must still meet thresholds (lowered batch sizes).
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.12.6 Required CI Checks (add to Branch Protection)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Add these 
\f1\b by exact name
\f0\b0  alongside
\f3\fs32  
\f7\fs29\fsmilli14667 Llama-Guard, Protocol-Auditor, GPT-Math-Validate, Test-Suite:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 Calibration-Gates
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs29\fsmilli14667 Backtest-Gates
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 (keep
\f3\fs32  
\f7\fs29\fsmilli14667 Test-Suite
\f3\fs32  
\f0\fs29\fsmilli14667 with coverage gate)
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f2\i\fs42\fsmilli21333 \cf3 CI wiring (append to .github/workflows/policy-and-math.yml)
\f0\i0 \cf4 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Calibration-Gates:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Run calibration checks
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: |
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 python -m tools.calibration_eval \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --preds artifacts/preds_sample.jsonl \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --config policies/calib_tolerance.yml \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --horizons "10,30,60,90,120,240" \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require-pass
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Backtest-Gates:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Micro backtest (24h fixture)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: |
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 python -m tools.micro_backtest \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --data tests/_fixtures/merged_24h.parquet \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --config configs/test.yml \\
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --out artifacts/micro_metrics.json
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Enforce PF/DD/flatness
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: |
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 python - <<'PY'
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 import json, sys
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 m = json.load(open("artifacts/micro_metrics.json"))
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 assert m["profit_factor_net"] >= 1.2, "PF gate failed"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 assert m["max_drawdown"] <= 0.12, "DD gate failed"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 assert m["flat_sessions"] == m["total_sessions"], "Flatness gate failed"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 print("Backtest gates OK")
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 PY
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 Keep your existing Test-Suite job (with coverage gate) as-is. 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa213\partightenfactor0

\f2\i\fs42\fsmilli21333 \cf3 Policy-as-code additions (append to core_protocol.md rules)
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 \'a0
\f0\i0 \cf2 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 - id: calib_coverage_70_90
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/**/predictions/*.jsonl"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "coverage_70 in [0.65..0.75] && coverage_90 in [0.85..0.95]"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: trading_pf_dd_flat
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/**"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "profit_factor_net>=1.2 && max_drawdown<=0.12 && flat_sessions==total_sessions"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - id: min_line_coverage
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 target: "repo/**"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 check: "coverage_line_pct>=70"
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 severity: error
\f0\fs32 \cf2 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 (These are enforced by the 
\f2\i Protocol-Auditor
\f0\i0  reading CI-produced metrics artifacts.)
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 \'a0
\f0\i0 \cf2 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f2\i\fs42\fsmilli21333 \cf3 Minimal test stubs (placeholders to implement)
\f0\i0 \cf4 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 tools/calibration_eval.py: loads per-horizon predictive distributions or quantiles \uc0\u8594  computes reliability, coverage, Brier/CRPS, PIT KS; exits non-zero on fail.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 tools/micro_backtest.py: deterministic paper-mode on a 24h fixture \uc0\u8594  outputs \{profit_factor_net, max_drawdown, flat_sessions, total_sessions\}.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 tools/coverage_gate.py: already referenced; ensure it emits coverage_line_pct for the policy rule. 
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f2\i\fs42\fsmilli21333 \cf3 Surgical cross-references to existing text
\f0\i0 \cf4 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 In 
\f1\b 4.1.9 Reproducibility, Logging, Success Gates
\f0\b0 , you already define 
\f1\b Max DD \uc0\u8804  12%, PF > 1.2, coverage \'b13\'965%, flatness
\f0\b0 . This chapter 
\f1\b elevates
\f0\b0  those from guidance to 
\f1\b merge-blocking checks
\f0\b0  via Calibration-Gates and Backtest-Gates. 
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 \'a0
\f0\i0 \cf2 \

\f2\i \cf3 \'a0
\f0\i0 \cf2 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 4.13 Observability & Audit (Forensic Traceability)\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Goal.
\f0\b0  Every change proposed by any AI/human must leave a 
\f1\b forensic trail
\f0\b0 : what context the model saw, what it replied, who/what decided, and under which rules. Artifacts are attached to the PR, checks enforce their presence, and summaries land in the repo\'92s audit log.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.1 What we always persist (as PR artifacts)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Each orchestrator job (see job_id in \'a74.6) must upload the following 
\f1\b non-secret
\f0\b0  artifacts: 
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 prompt_pkg_sanitized.json
\f0\b0  \'97 the exact, redacted, minimized package sent to any cloud model (hash ties to \'a74.8).
\f3\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Fields: files (paths, line ranges), diff_snippets, policy_rule_ids, size_bytes, sha256. 
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 model_response_digest.txt
\f0\b0  \'97 deterministic digest (first 1,000 chars + SHA256) of the model output actually used.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 decision_log.jsonl
\f0\b0  \'97 one line per state transition (from \'a74.5/\'a74.6): timestamp, job_id, state \uc0\u8594  next, actor (llama|gpt|orchestrator|human), verdict, rationale. 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 state_snapshot.json
\f0\b0  \'97 orchestrator state 
\f1\b hash
\f0\b0  + metadata at push time:\uc0\u8232 job_id, shards, lock holder/time (from \'a74.5), orchestrator version, 
\f1\b validator versions
\f0\b0  (llama_guard, protocol_auditor, gpt_math_validate), and 
\f1\b rule hashes
\f0\b0  for core_protocol.md + policies/*.yml (from \'a74.3). 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 metrics_summary.json
\f0\b0  \'97 CI-produced key gates (tests coverage, calibration, micro-backtest PF/DD/flatness) used by \'a74.12. 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 ai_attestation.json
\f0\b0  \'97 already required by \'a74.3; include its signature + provenance. 
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Size caps: each artifact \uc0\u8804  
\f1\b 2 MB
\f0\b0 ; truncate large sections and keep hashes. Never include secrets or raw datasets.
\f3\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.2 Required PR footer (template)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Extend .github/pull_request_template.md with an 
\f1\b Audit
\f0\b0  block the orchestrator auto-fills:
\f3\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 ## Audit
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - job_id: <YYYYMMDD-HHMMSS-uuid8-ticket>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - orchestrator_state_hash: <sha256:8>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - validators: llama_guard=<v>, protocol_auditor=<v>, gpt_math_validate=<v>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - rules_snapshot: core_protocol.md=<sha256:8>, policies=<sha256:8>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - prompt_pkg_sha256: <sha256:8>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - attestation_sha256: <sha256:8>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 - metrics: coverage=<pct>, PF=<x.xx>, maxDD=<x.xx>, flatness=<a/b>
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 These fields must match the uploaded artifacts; CI verifies consistency.
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 \'a0
\f0\i0 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.3 CI job: Observability audit (merge-blocking)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Add a 
\f1\b required
\f0\b0  check named Observability-Audit (see \'a74.7 for required checks list) that verifies:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 All artifacts in 
\f1\b 4.13.1
\f0\b0  exist and are within size limits.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 PR footer fields match the artifacts\'92 hashes/values.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 ai_attestation.json signature is valid (reuses \'a74.3 verify). 
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 .github/workflows/observability-audit.yml
\f3\b0\fs32 \

\f1\b\fs29\fsmilli14667 \'a0
\f3\b0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 name: observability-audit
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 on:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 pull_request:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 branches: ["main", "release/**"]
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 jobs:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0 Observability-Audit:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 runs-on: ubuntu-latest
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 steps:
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/checkout@v4
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - uses: actions/setup-python@v5
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 with: \{ python-version: "3.11" \}
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - run: pip install -r requirements.txt
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0 - name: Verify artifacts & PR footer
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 run: python -m tools.observability_verify \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require prompt_pkg_sanitized.json \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require model_response_digest.txt \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require decision_log.jsonl \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require state_snapshot.json \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --require metrics_summary.json \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --attestation ai_attestation.json \\
\f3\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 --check-pr-footer
\f3\fs32 \cf2 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f9\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.4 PR timeline signals (human-friendly)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 On each state change (from \'a74.5.5/\'a74.6.10), the orchestrator 
\f1\b updates PR labels
\f0\b0  and posts a compact 
\f1\b status comment
\f0\b0  with: job_id, current state, last validator outcomes, and links to the artifacts (retained by CI). This extends your existing label practice. 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.5 Governance log (post-merge)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 On merge, append a single-line entry to 
\f1\b GOVERNANCE_LOG.md
\f0\b0 :
\f3\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 <ISO8601> PR#<n> <commit_sha:8> job_id=<...> state_hash=<sha8> rules=<core:sha8|policies:sha8> attestation=<sha8> pf=<x.xx> dd=<x.xx> flat=<a/b> approvers=@A,@B
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Break-glass merges must include mode=break-glass and skipped checks (ties to \'a74.10).
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f9\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.6 Retention & privacy\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Artifact retention:
\f0\b0  180 days in CI; long-term digests live in the repo (governance log).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 PII/secrets policy:
\f0\b0  artifacts are sanitized via \'a74.8 prompt-guard; CI also runs Secret-Scan (from \'a74.9) over artifacts before upload; fail closed on hit. 
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.13.7 Rationale\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 You already have acceptance gates (PF, DD, calibration), attestation, CI wiring, and label/state visibility. This chapter 
\f1\b links them with durable evidence
\f0\b0 \'97so months later you can prove exactly 
\f1\b what
\f0\b0  the AI saw, 
\f1\b what
\f0\b0  it proposed, 
\f1\b which
\f0\b0  rules/versions applied, and 
\f1\b why
\f0\b0  a change was merged. 
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf9 \'a0
\fs32 \cf2 \

\fs29\fsmilli14667 \cf9 \'a0
\fs32 \cf2 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 5\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Deploying Multi-AI Workflow for LTC Trading System Development\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \uc0\u8232 A mandatory coordination system for developing algorithmic ultra-short time LTC prediction using Claude Code, GPT-4/5, and local Llama to prevent AI drift and ensure protocol compliance.
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 5.1\'a0\'a0\'a0\'a0\'a0 System Architecture - Mandatory Multi-AI Coordination\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The fundamental premise of this system is that 
\f1\b single-AI development fails due to specification drift
\f0\b0 . Claude Code alone cannot maintain consistency across complex trading system requirements, which is why continuous multi-AI validation is essential, not optional.
\f3\fs32 \

\f0\fs29\fsmilli14667 This architectural decision stems from practical experience: AI systems gradually deviate from original specifications when working on complex projects. For a trading system where precision is critical, this drift can lead to incorrect implementations that compromise profitability or violate risk management rules.
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.1.1\'a0\'a0\'a0\'a0 Core Architecture: Continuous Validation System\
\pard\pardeftab720\sa320\partightenfactor0

\f1\i0\b \cf2 Claude Code (Implementation Engine)
\f0\b0 : 
\f3 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Handles code generation and file operations, but operates under constant oversight to prevent drift from specifications. Claude Code excels at understanding codebases and implementing features, but lacks the persistent memory needed to maintain long-term specification adherence across multiple development sessions.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf2 Local Llama (Drift Prevention Agent)
\f0\b0 : 
\f3 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Continuously monitors every code change for protocol violations and specification drift. This is not occasional validation - it's mandatory oversight of every development decision. Running locally on your Mac Mini M4 eliminates API costs and latency while providing real-time validation.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf2 GPT-4/5 (Mathematical Validator)
\f0\b0 : 
\f3 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Validates all mathematical components for correctness, triggered automatically by code content analysis rather than unreliable "when needed" detection. GPT-4/5's superior mathematical reasoning capabilities make it essential for validating complex algorithms like Bayesian LSTM models and Kelly Criterion calculations.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf2 Communication Flow:
\f3\b0 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Python orchestrator script manages all AI interactions and maintains project state
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Claude Code implements features within strict constraint frameworks
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Llama immediately validates for protocol drift and specification adherence
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 GPT-4/5 automatically reviews mathematical components based on content analysis
\f3\fs32 \

\f0\fs29\fsmilli14667 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Git pre-commit hooks provide final immutable enforcement
\f3\fs32 \

\f0\fs29\fsmilli14667 6.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Process repeats for every code change to prevent accumulated drift
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This continuous validation approach addresses the core weakness of single-AI development: the tendency for implementations to gradually deviate from original specifications as projects grow in complexity.
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 5.2\'a0\'a0\'a0\'a0\'a0 Drift Prevention Implementation\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The core problem this system solves is AI specification drift - the gradual deviation from original requirements that makes complex AI-assisted development unreliable. Traditional development approaches assume human oversight can catch these deviations, but in rapid AI-assisted development, the volume and complexity of changes make manual oversight insufficient.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.2.1\'a0\'a0\'a0\'a0 Mandatory Validation Orchestrator\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 This orchestrator ensures that every piece of code undergoes validation against your original specifications, preventing the accumulated drift that destroys project coherence:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 class DriftPreventionOrchestrator:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def __init__(self):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.claude_code = ClaudeCodeInterface()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.gpt4 = GPT4Interface()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.llama = LlamaInterface()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.protocol = TradingProtocol()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.project_state = ProjectState()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def develop_feature_with_drift_prevention(self, feature_description):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Step 1: Claude Code implements with constraint context
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 code = self.claude_code.implement(
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 feature_description, 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 context=self.project_state.get_full_context(),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 constraints=self.protocol.get_active_constraints()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 )
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Step 2: MANDATORY drift validation (not optional)
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 drift_check = self.llama.validate_against_specifications(
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 code, 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.project_state.original_specifications,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.project_state.previous_implementations
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 )
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if drift_check.has_violations:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 code = self.claude_code.correct_specification_drift(
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 code, 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 drift_check.violations,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.project_state.original_intent
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 )
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Step 3: Automatic mathematical validation based on content
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if self.contains_mathematical_components(code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 math_validation = self.gpt4.validate_mathematical_correctness(code)
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if math_validation.has_errors:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 code = self.claude_code.fix_mathematical_errors(
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 code, 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 math_validation.corrections
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 )
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Step 4: Update project state to prevent future drift
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.project_state.record_implementation_decisions(code, feature_description)
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return code
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def contains_mathematical_components(self, code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 """Deterministic detection of mathematical content requiring GPT validation"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 math_patterns = [
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'bayesian|lstm|probability|distribution',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'kelly|criterion|optimization|gradient',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'np\\.(mean|std|var|cov|linalg)',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'tf\\.(nn\\.|math\\.|linalg\\.)',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'scipy\\.(optimize|stats|integrate)',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 r'@tf\\.function.*mathematical'
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 ]
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return any(re.search(pattern, code, re.IGNORECASE) for pattern in math_patterns)
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The orchestrator maintains project state across all development sessions, ensuring that each new implementation is consistent with previous decisions and original specifications. This prevents the fragmentation that occurs when AI systems work without persistent context.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.2.2\'a0\'a0\'a0\'a0 Specification Adherence Tracking\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Specification drift occurs gradually through small deviations that individually seem acceptable but collectively destroy project coherence. This tracking system maintains vigilant oversight of all implementation decisions:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 class SpecificationTracker:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def __init__(self):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.original_specifications = self.load_project_specifications()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.implementation_history = []
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.drift_violations = []
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def validate_specification_adherence(self, new_code, module_name):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 violations = []
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Check against original trading system requirements
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if not self.maintains_200ms_intervals(new_code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 violations.append("Code violates 200ms interval requirement")
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if not self.maintains_bayesian_approach(new_code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 violations.append("Implementation deviates from Bayesian framework")
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if not self.maintains_risk_parameters(new_code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 violations.append("Risk management parameters altered from specification")
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Record any drift for correction
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if violations:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.drift_violations.append(\{
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'module': module_name,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'violations': violations,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'timestamp': datetime.now()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \})
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return len(violations) == 0, violations
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f6\i\fs29\fsmilli14667 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This systematic tracking prevents the subtle specification changes that accumulate over time and eventually compromise the entire system's reliability.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-960\sl368\sa53\partightenfactor0

\f2\i \cf4 5.2.3
\f3\i0\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f2\i\fs32 Mathematical Component Detection\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Rather than unreliable "when needed" detection, the system automatically identifies mathematical components requiring GPT-4/5 validation through explicit analysis criteria:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 def determine_validation_requirements(self, code, file_path):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 """Explicit rules for when GPT-4/5 validation is required"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 validation_required = False
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 # File-based triggers
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 mathematical_modules = [
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'bayesian_lstm', 'kelly_calculator', 'risk_manager',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'model', 'prediction', 'optimization'
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 ]
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 if any(module in file_path.lower() for module in mathematical_modules):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 validation_required = True
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 # Content-based triggers\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 mathematical_operations = [
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'probability distribution', 'bayesian inference', 'lstm',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'kelly criterion', 'optimization', 'gradient descent',
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'covariance matrix', 'likelihood function'
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 ]
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 if any(op in code.lower() for op in mathematical_operations):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 validation_required = True
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 # TensorFlow/numerical computation triggers
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 if re.search(r'tf\\.(nn\\.|math\\.|linalg\\.)', code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 validation_required = True
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 return validation_required
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This eliminates the guesswork about when mathematical validation is needed by defining explicit, deterministic criteria. The approach ensures that complex mathematical components receive proper validation without relying on unreliable heuristics or human judgment calls that might be inconsistent.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 5.3\'a0\'a0\'a0\'a0\'a0 Continuous Development Workflow\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Unlike optional consultation systems, this workflow mandates validation at every step to prevent specification drift. The continuous approach acknowledges that drift prevention requires constant vigilance, not periodic checks that might miss gradual deviations.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.3.1\'a0\'a0\'a0\'a0 Mandatory Validation Cycle\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Every development task follows this rigid structure to prevent drift. This disciplined approach may seem excessive, but it addresses the fundamental unreliability of AI systems when working on complex, long-term projects:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Context Loading
\f0\b0 : Load complete project state, specifications, and previous implementation decisions - ensures every new implementation has full awareness of project constraints and history\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Constrained Implementation
\f0\b0 : Claude Code implements within explicit constraint frameworks rather than operating with general instructions that might be interpreted inconsistently\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Immediate Drift Validation
\f0\b0 : Llama validates against specifications before any code is accepted - catches deviations immediately rather than allowing them to accumulate\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Automatic Mathematical Review
\f0\b0 : GPT-4/5 reviews based on deterministic content analysis rather than subjective "when needed" judgments\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 5.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 State Update
\f0\b0 : Record all decisions to prevent future inconsistencies - builds institutional memory that prevents repetitive mistakes\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 6.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Immutable Enforcement
\f0\b0 : Git hooks provide final validation that cannot be bypassed by any AI agent or human error
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This rigorous process prevents the gradual quality degradation that typically occurs in AI-assisted development projects.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.3.2\'a0\'a0\'a0\'a0 Drift Detection and Correction\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The system continuously monitors for specification drift through multiple overlapping mechanisms, providing defense in depth against gradual deviation from requirements:
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Immediate Detection
\f0\b0 : Every code change is validated against original specifications within seconds of generation, preventing drift from accumulating
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Pattern Recognition
\f0\b0 : Llama identifies subtle deviations from established patterns that might indicate drift beginning, catching problems before they become systematic
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Consistency Checking
\f0\b0 : New implementations are compared against previous decisions to identify inconsistencies that suggest specification drift
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Automatic Correction
\f0\b0 : When drift is detected, Claude Code is immediately directed to correct the deviation with specific reference to original specifications, preventing the need for major refactoring later
\f3\fs32 \

\f0\fs29\fsmilli14667 This multi-layered approach acknowledges that specification drift is insidious and requires multiple detection mechanisms to catch reliably.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 5.4\'a0\'a0\'a0\'a0\'a0 Mathematical Validation Automation\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Since manual "when needed" decisions are unreliable and inconsistent, the system automatically triggers GPT-4/5 validation based on objective code analysis. This removes human judgment from the decision process and ensures that mathematical components receive appropriate validation regardless of development context or timing.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 4.4.1\'a0\'a0\'a0\'a0 Automatic Trigger System\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This system analyzes code content to determine mathematical validation needs objectively, eliminating the inconsistency and potential oversights of manual decision-making:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 def analyze_mathematical_complexity(self, code):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 """Determine mathematical validation needs through code analysis"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 complexity_indicators = \{
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'statistical_functions': len(re.findall(r'(mean|std|var|cov|norm)', code)),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'bayesian_keywords': len(re.findall(r'(prior|posterior|likelihood|bayesian)', code)),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'optimization_functions': len(re.findall(r'(minimize|maximize|gradient|jacobian)', code)),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'matrix_operations': len(re.findall(r'(dot|matmul|linalg|eigen)', code)),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'probability_distributions': len(re.findall(r'(normal|gaussian|uniform|beta)', code))
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 \}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 total_complexity = sum(complexity_indicators.values())
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 return \{
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'requires_validation': total_complexity > 3,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'complexity_score': total_complexity,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 'specific_areas': [k for k, v in complexity_indicators.items() if v > 0]
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 \}
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f6\i\fs29\fsmilli14667 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The quantitative approach to validation decisions ensures consistency across all development sessions and eliminates the possibility of missing critical mathematical components due to oversight or inconsistent judgment.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.4.2\'a0\'a0\'a0\'a0 Targeted Mathematical Review\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 When mathematical validation is triggered, GPT-4/5 receives specific context about what needs verification, making the validation process more efficient and focused:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 def request_mathematical_validation(self, code, complexity_analysis):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 """Request targeted mathematical review from GPT-4/5"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 validation_prompt = f"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Review this LTC trading system code for mathematical correctness:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Code complexity analysis: \{complexity_analysis\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Specific areas requiring validation:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 \{complexity_analysis['specific_areas']\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Critical requirements:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 - Bayesian inference must be mathematically sound
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 - Kelly Criterion calculations must handle edge cases
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 - All probability distributions must be properly normalized
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 - Matrix operations must be dimensionally consistent
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Code to validate:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 \{code\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 Provide specific mathematical corrections, not general feedback.
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 """
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 return self.gpt4.validate_with_context(validation_prompt)
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This targeted approach ensures that GPT-4/5 validation is specific and actionable rather than providing generic feedback that might not address the actual mathematical issues present in the code.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 5.5\'a0\'a0\'a0\'a0\'a0 Shared State Management\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 To prevent drift, all AI agents must work from identical project state information. Inconsistent information across AI agents is a primary cause of specification drift and conflicting implementations.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.5.1\'a0\'a0\'a0\'a0 Centralized Project State\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 This centralized approach ensures that all AI agents have access to identical project information, preventing the inconsistencies that lead to specification drift:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl306\sa213\partightenfactor0

\f6\i\fs26\fsmilli13333 \cf9 class ProjectStateManager:
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def __init__(self):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.specifications = self.load_original_specifications()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.implementation_decisions = \{\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.protocol_violations = []
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.mathematical_validations = \{\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.performance_benchmarks = \{\}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def update_after_implementation(self, module_name, code, decisions_made):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 """Record implementation decisions to prevent future drift"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.implementation_decisions[module_name] = \{
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'code': code,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'decisions': decisions_made,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'timestamp': datetime.now(),
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'validated_by': ['claude_code', 'llama', 'gpt4']
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.save_state()
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def get_context_for_ai(self, ai_agent, current_task):
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 """Provide consistent context to all AI agents"""
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return \{
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'original_specifications': self.specifications,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'previous_decisions': self.implementation_decisions,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'known_violations': self.protocol_violations,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'current_task': current_task,
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 'agent_role': ai_agent
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0\i0\fs32 \cf2 \

\f6\i\fs26\fsmilli13333 \cf9 \'a0
\f0\i0\fs32 \cf2 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The state management system serves as the institutional memory that prevents AI agents from making decisions that conflict with previous implementations or violate established patterns.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 5.6\'a0\'a0\'a0\'a0\'a0 Implementation Strategy\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Given the complexity involved in preventing AI drift, here's a realistic implementation approach that acknowledges both the necessity and the challenges of the multi-AI coordination system:
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.6.1\'a0\'a0\'a0\'a0 Phase 1: Core Drift Prevention\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The foundation phase establishes the basic infrastructure needed for drift prevention:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Implement the orchestrator script
\f0\b0  that manages all AI interactions - this is the central nervous system that coordinates all AI activities\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Create specification tracking
\f0\b0  that records and enforces original requirements - establishes the reference point against which all implementations are validated\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Build automatic mathematical detection
\f0\b0  that triggers GPT-4/5 validation - eliminates unreliable human judgment about when validation is needed\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Establish Git hooks
\f0\b0  for immutable final enforcement - provides the ultimate safety net that cannot be bypassed
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This phase focuses on establishing the core validation mechanisms that prevent drift rather than optimizing for development speed.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 5.6.2\'a0\'a0\'a0\'a0 Phase 2: Continuous Validation\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The operational phase implements the continuous monitoring that makes drift prevention effective:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Deploy Llama as continuous monitor
\f0\b0  running locally on your Mac Mini M4 - provides real-time validation without API costs or latency
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Implement automatic drift correction
\f0\b0  when violations are detected - creates a self-correcting system that maintains specification adherence
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Create performance monitoring
\f0\b0  to measure system effectiveness - ensures the complexity is providing actual value
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Build rollback mechanisms
\f0\b0  for when corrections fail - provides recovery options when the automated system encounters problems it cannot resolve
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 This phase transforms the basic validation system into an active drift prevention mechanism.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 \'a0\
5.6.3\'a0\'a0\'a0\'a0 Success Metrics\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Monitor whether the multi-AI system actually prevents drift rather than just adding complexity:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Specification adherence
\f0\b0 : Percentage of implementations that match original requirements - measures the system's core effectiveness\uc0\u8232 \u8232 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Drift detection rate
\f0\b0 : How quickly specification violations are caught - measures the system's responsiveness\uc0\u8232 \u8232 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Correction effectiveness
\f0\b0 : Whether automatic corrections resolve drift issues - measures the system's self-healing capability\uc0\u8232 \u8232 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Development velocity
\f0\b0 : Whether the system speeds up or slows down development - measures whether the benefits justify the complexity
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 These metrics provide objective measurement of whether the sophisticated coordination system is providing value proportionate to its complexity.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 5.7\'a0\'a0\'a0\'a0\'a0 Critical Success Factors\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 This system only works if implemented with complete commitment to continuous validation. Partial implementation will not solve the drift problem and will add complexity without providing benefits:
\f3\fs32 \

\f1\b\fs29\fsmilli14667 No Optional Steps
\f0\b0 : Every code change must go through the full validation cycle - drift prevention requires consistent application, not selective use
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Deterministic Triggers
\f0\b0 : Mathematical validation must be triggered by explicit rules, not guesswork - eliminates inconsistency in validation application
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Immutable Enforcement
\f0\b0 : Git hooks provide final safety net that cannot be bypassed - ensures that validation cannot be circumvented under pressure
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Complete State Tracking
\f0\b0 : All decisions must be recorded to prevent future drift - builds institutional memory that prevents repetitive mistakes
\f3\fs32 \

\f0\fs29\fsmilli14667 The multi-AI approach addresses real problems with single-agent development, but only if implemented as a complete system rather than optional consultation framework. The complexity is justified because it solves the fundamental reliability issues that make AI development unsuitable for critical trading systems without continuous oversight.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 5.8\'a0\'a0\'a0\'a0\'a0 Regular Informing of the User \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The multi-AI model must inform the user regularly 
\fs32 \
\pard\pardeftab720\li960\fi-480\sl368\partightenfactor0

\f4 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 what the model has been doing, 
\fs32 \

\f4 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 what it is doing right now, and 
\fs32 \
\pard\pardeftab720\li960\fi-480\sl368\sa213\partightenfactor0

\f4 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 what it is planning to do next. 
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The user has to know in which phase the multi-AI model is when it's' developing the repository. - How could this be possible?
\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li693\fi-694\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 6
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs42\fsmilli21333 Designing and Defining a Dynamic Kelly Criterion for a Bayesian LSTM-Based Crypto Trading Model\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f1\b \cf2 \uc0\u8232 
\f0\b0\fs29\fsmilli14667 This 
\f1\b cryptocurrency (paper) trading system
\f0\b0  based on a 
\f1\b Bayesian LSTM prediction model
\f0\b0 . The model outputs a 
\f1\b Gaussian probability distribution
\f0\b0  of future prices at multiple time horizons (10s, 30s, 60s, 90s, and 120s) in 1
\f1\b -second intervals
\f0\b0 .
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This system will place both 
\f1\b long and short positions
\f0\b0 , and we want to use the 
\f1\b Kelly Criterion
\f0\b0  to determine the 
\f1\b optimal fraction of capital
\f0\b0  to invest in each trade.
\fs32 \
\'a0\
\pard\pardeftab720\li960\fi-960\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 6.1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs37\fsmilli18667 Problem of the Traditional Kelly Criterion\
\pard\pardeftab720\li960\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The traditional approach to the 
\f1\b Kelly Criterion
\f0\b0  relies on:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls1\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Estimating the 
\f1\b probability
\f0\b0  of a "win"
\fs32 \
\ls1\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Estimating the 
\f1\b payout
\f0\b0  of a "win"
\fs32 \
\ls1\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Using these to compute the optimal capital fraction
\fs32 \
\pard\pardeftab720\li960\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 However, this approach is overly simplistic and 
\f1\b unsuitable
\f0\b0  for our scenario because:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls2\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
The Bayesian LSTM outputs a 
\f1\b continuous Gaussian distribution
\f0\b0 , not a discrete win/loss outcome.
\fs32 \
\ls2\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Any 
\f1\b arbitrary threshold
\f0\b0  (e.g. \'93use the 80% lower bound\'94) introduces 
\f1\b bias
\f0\b0  and may miss better opportunities.
\fs32 \
\ls2\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
The model now supports 
\f1\b both long and short positions
\f0\b0 , so both positive and negative expected returns must be considered.
\fs32 \
\ls2\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
We must treat the 
\f1\b entire distribution
\f0\b0  of predicted prices as a source of possible outcomes, each with its own profit/loss and associated probability.
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 6.2\'a0\'a0\'a0\'a0\'a0 Enhanced Kelly Fraction Calculation Method\'a0 \cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This section defines the exact method to compute the per
\f5 \uc0\u8209 
\f0 horizon Kelly fraction from the model\'92s predictive distribution, including costs and SL/TP, and the numerical procedure to obtain the optimum.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.1\'a0\'a0\'a0\'a0 Formal Objective (per horizon h)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa213\qc\partightenfactor0

\f7 \cf2 G
\f0 \uc0\u8341 
\f7 (f) = \uc0\u8747 \u8336 
\f0 \uc0\u8341 
\f7 \uc0\u7495 
\f0 \uc0\u8341 
\f7  p
\f0 \uc0\u8341 
\f7 (\uc0\u916 P) \'b7 log(1 + f \'b7 r(\u916 P)) d(\u916 P)
\f0 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'95 p\uc0\u8341 (\u916 P): 
\f0\b0 predictive probability density of price change \uc0\u916 P at horizon h (Gaussian with mean \u956 \u8341  and standard deviation \u963 \u8341 ).
\fs32 \

\f1\b\fs29\fsmilli14667 \'95 r(\uc0\u916 P): 
\f0\b0 cost
\f5 \uc0\u8209 
\f0 adjusted return of a unit
\f5 \uc0\u8209 
\f0 notional trade evaluated at \uc0\u916 P; includes trading fee, spread and slippage; SL/TP modify r(\u916 P) and induce the bounds [a\u8341 , b\u8341 ].
\fs32 \

\f1\b\fs29\fsmilli14667 \'95 [a\uc0\u8341 , b\u8341 ]: 
\f0\b0 integration bounds set by stop
\f5 \uc0\u8209 
\f0 loss / take
\f5 \uc0\u8209 
\f0 profit for horizon h.
\fs32 \

\f1\b\fs29\fsmilli14667 \'95 f\uc0\u8341 *: 
\f0\b0 optimal Kelly fraction: f\uc0\u8341 * = argmax_f G\u8341 (f).
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.2\'a0\'a0\'a0\'a0 Feasibility & Domain\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Enforce 1 + f \'b7 r(\uc0\u916 P) > 0 for all \u916 P 
\f5 \uc0\u8712 
\f0  [a\uc0\u8341 , b\u8341 ]. Optimize with exposure caps f 
\f5 \uc0\u8712 
\f0  [\uc0\u8722 1, 1].
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.3\'a0\'a0\'a0\'a0 Discrete Approximation\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa213\qc\partightenfactor0

\f7 \cf2 G
\f0 \uc0\u8341 
\f7 (f) \uc0\u8776  \u931 \u7522  w\u7522  \'b7 log(1 + f \'b7 r(\u916 P\u7522 ))\'a0\'a0 with\'a0\'a0 \u931 \u7522  w\u7522  = 1,\'a0\'a0 \u916 P\u7522  
\f5 \uc0\u8712 
\f7  [a
\f0 \uc0\u8341 
\f7 , b
\f0 \uc0\u8341 
\f7 ]
\f0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Use quadrature on an evenly spaced grid or importance sampling from p\uc0\u8341 (\u916 P). We recommend 201 grid points on [a\u8341 , b\u8341 ] or \u8805 10,000 samples for Monte Carlo, whichever is faster under latency constraints.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.4\'a0\'a0\'a0\'a0 Interpretation for Long/Short\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Long utility integrates mass where r(\uc0\u916 P) > 0 (after costs); short utility integrates mass where r(\u916 P) < 0. The same objective handles both signs via f 
\f5 \uc0\u8712 
\f0  [\uc0\u8722 1,1].
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.5\'a0\'a0\'a0\'a0 Costs and SL/TP\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Model r(\uc0\u916 P) to subtract entry (and, if applicable, exit) fees, spread and slippage. Default total cost assumption is \u8805 20 bps per leg; round
\f5 \uc0\u8209 
\f0 trip simulations must include both entry and exit costs. SL/TP define [a\uc0\u8341 , b\u8341 ] and clip r(\u916 P) accordingly.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.6\'a0\'a0\'a0\'a0 Numerical Optimization\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Maximize G\uc0\u8341 (f) with a bounded scalar optimizer (e.g., golden
\f5 \uc0\u8209 
\f0 section search or Brent) on f 
\f5 \uc0\u8712 
\f0  [\uc0\u8722 1, 1]. Stop when |\u916 f| < 1e\u8722 4 or |\u916 G| < 1e\u8722 8. If feasibility is violated at any trial f, shrink the bracket.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.7\'a0\'a0\'a0\'a0 Stability & Diagnostics\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Use \uc0\u963 _stable,\u8341  = max(\u963 \u8341  \'b7 (1 \u8722  attention_concentration\u8341 ), \u963 _min) with \u963 _min = 1e\u8722 6 to avoid degenerate variance. Report f_gauss,\u8341  = \u956 \u8341  / \u963 \u8341 \'b2 as a diagnostic only (not for trading). If \u963 _stable,\u8341  \u8776  \u963 _min or G\u8341 (f) is flat, set f\u8341 * = 0.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.2.8\'a0\'a0\'a0\'a0 Outputs (per horizon h)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Persist \uc0\u956 \u8341 , \u963 \u8341  (or \u963 _stable,\u8341 ), f\u8341 *, f_gauss,\u8341  (diagnostic), and the achieved G\u8341 (f\u8341 *). Aggregation of \{f\u8341 *\} across horizons is specified in the trading chapter (entropy
\f5 \uc0\u8209 
\f0 adaptive weights, renormalized to 100%).
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 6.3\'a0\'a0\'a0\'a0\'a0 Mathematical Model: Kelly Fraction for Gaussian Price Prediction\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f1\b\fs32 \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Definitions
\f0\b0\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Let:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl342\sa213\partightenfactor0
\ls3\ilvl0
\f7 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91P_t\'92
\f0\fs29\fsmilli14667  = current asset price
\fs32 \
\ls3\ilvl0
\f7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91mu\'92
\f0\fs29\fsmilli14667  = mean of predicted future price (from Bayesian LSTM)
\fs32 \
\ls3\ilvl0
\f7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91sigma\'92
\f0\fs29\fsmilli14667  = standard deviation of predicted price
\fs32 \
\ls3\ilvl0
\f7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91f\'92
\f0\fs29\fsmilli14667  = capital fraction to invest (positive for long, negative for short)
\fs32 \
\ls3\ilvl0
\f7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91p(x)\'92
\f0\fs29\fsmilli14667  = probability density function (PDF) of predicted price x, assumed to be Gaussian:
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 p(x) = (1 / sqrt(2 * pi * sigma^2)) * exp(- (x - mu)^2 / (2 * sigma^2))
\f0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl342\sa213\partightenfactor0
\ls4\ilvl0
\f7 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91r(x)\'92
\f0\fs29\fsmilli14667  = return if price becomes x at the prediction horizon:
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 r(x) = (x - P_t) / P_t
\f0 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.3.1\'a0\'a0\'a0\'a0 Logarithmic Capital Growth\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The logarithmic growth of capital for a possible price x is:
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 g(x, f) = log(1 + f * r(x)) = log(1 + f * (x - P_t) / P_t)
\f0 \
\'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The expected log-growth over all possible outcomes is:
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 G(f) = integral from x=0 to infinity of [ p(x) * log(1 + f * (x - P_t) / P_t) dx ]
\f0 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.3.2\'a0\'a0\'a0\'a0 Optimization Objective\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The optimal Kelly Fraction f* maximizes the expected logarithmic growth 
\f7\fs32 \'92G(f)\'92:
\f0 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 f* = argmax_f G(f)
\f0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 Subject to the constraint:
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 1 + f * (x - P_t) / P_t > 0
\f0 \'a0\'a0 
\fs29\fsmilli14667 for all x in the integration domain
\fs32 \
\'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 This ensures the logarithm is defined and avoids undefined or negative growth outcomes.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.3.3\'a0\'a0\'a0\'a0 Stop-Loss and Take-Profit Boundaries\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 To include Stop-Loss (SL) and Take-Profit (TP), restrict the integration bounds:
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f7 \cf2 \'a0
\f0 \

\f7 a = P_t * (1 - stop_loss)
\f0 \

\f7 b = P_t * (1 + take_profit)
\f0 \
\'a0\

\f7 G(f) = integral from x=a to b of [ p(x) * log(1 + f * (x - P_t) / P_t) dx ]
\f0 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa213\partightenfactor0

\fs37\fsmilli18667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 6.4\'a0\'a0\'a0\'a0\'a0 Choosing the Best Numerical Method for Calculating the Integral Function\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The calculus equation:
\fs32  
\f7 \'91G(f)=\uc0\u8747 abp(x)
\f5 \uc0\u8901 
\f7 log(1+f
\f5 \uc0\u8901 
\f7 Ptx\uc0\u8722 Pt
\f5  
\f7 )dx\'92
\f0  
\fs29\fsmilli14667 is not possible to solve exactly. So, we should analyze what is the best and most accurate numerical method for calculating this.
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f1\b \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 6.4.1\'a0\'a0\'a0\'a0 Best General Purpose Method: scipy.integrate.quad (Gauss-Kronrod)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls5\ilvl0
\f1\b\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Accurate and fast
\f0\b0\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls5\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Handles adaptive subdivision automatically
\fs32 \
\ls5\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Built-in singularity handling (you can split integration intervals at known critical points)
\fs32 \
\ls5\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Can raise warnings if it suspects problems (great for debugging)
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 If Extra Precision or to Validate Results Are Wanted:
\f0\i0 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls6\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Use 
\f1\b Tanh-Sinh
\f0\b0  quadrature or 
\f1\b mpmath.quad()
\f0\b0  for validation
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 Additional Tips
\f0\i0 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls7\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Always check:
\fs32 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl313\sa213\partightenfactor0
\ls7\ilvl1
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
That 
\f7\fs32 \'911 + f 
\f5 \uc0\u8901 
\f7  r(x) > 0\'92
\f0\fs29\fsmilli14667  in your integration domain (to avoid 
\f7\fs32 \'91log(negative)\'92
\f0\fs29\fsmilli14667 ).
\fs32 \
\ls7\ilvl1
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
That 
\f7\fs32 \'91p(x)\'92 
\f0\fs29\fsmilli14667 is not numerically zero where 
\f7\fs32 \'91log(1 + f*r(x))\'92 
\f0\fs29\fsmilli14667 is steep (to avoid wasting computation on low-probability tails).
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl313\sa213\partightenfactor0
\ls7\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If using 
\f1\b multiple time horizons
\f0\b0 , consider reusing the integration grid where possible to improve speed.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Making the Bayesian LSTM Model \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 \'a0\
7.1\'a0\'a0\'a0\'a0\'a0 Start with a Baseline Bayesian LSTM\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The Bayesian LSTM model is going to be structured by building a 
\f1\b minimal working model
\f0\b0  that can run on the dataset.
\f3\fs32 \

\f1\b\fs29\fsmilli14667 Reasonable defaults have to be used
\f0\b0  (e.g. 1 LSTM layer, 32\'9664 hidden units, dropout 0.2\'960.3).
\f3\fs32 \

\f0\fs29\fsmilli14667 The Bayesian LSTM model is wrapped with 
\f1\b Monte Carlo Dropout
\f0\b0  or another Bayesian approach (e.g. Pyro variational layers).
\f3\fs32 \

\f0\fs29\fsmilli14667 Output: 
\f1\b 6 parallel regression heads
\f0\b0  for your prediction horizons (10s, 30s, 60s, 90s, 120s, 240s).
\f3\fs32 \

\f0\fs29\fsmilli14667 This gives us uncertainty-aware predictions without tuning yet.
\f3\fs32 \

\f0\fs29\fsmilli14667 The on-chain and off-chain data should be divided to training and testing datasets. The whole dataset should not be used to train the model, because the model must be tested with unseen data.
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 7.2\'a0\'a0\'a0\'a0\'a0 Verify Data and the Model Pipeline\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Before hyperparameter tuning:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Make sure that the merged Parquet files are correctly preprocessed (lists split, timestamps aligned).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Define the S
\f1\b liding Window
\f0\b0  input (1 timestep = 1 second).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Confirm that the model can load data and produce predictions (even if crude).
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 7.3\'a0\'a0\'a0\'a0\'a0 Hyperparameter Tuning\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Once the pipeline runs end-to-end:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Tune hyperparameters like hidden units, number of layers, dropout, learning rate, batch size, etc.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Use 
\f1\b grid search or Bayesian optimization
\f0\b0 .
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Apply 
\f1\b early stopping
\f0\b0  and validation metrics (RMSE, MAE, calibration of predictive uncertainty).
\f3\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 \'a0\
8\'a0\'a0\'a0\'a0 Search for Optimal Hyperparameters \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 8.1\'a0\'a0\'a0\'a0\'a0 Core model (Bayesian LSTM w/ MC Dropout)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 window_size (timesteps @ 1s cadence): 
\f1\b [60, 90, 120]
\f0\b0  \uc0\u8194 (1 step = 1s; horizons are 10/30/60/90/120/240s with 6 heads). 
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 hidden_size: 
\f1\b [32, 48, 64, 96]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 num_lstm_layers: 
\f1\b [1, 2]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 bidirectional: 
\f1\b [False]
\f0\b0  (set 
\f1\b True
\f0\b0  only in the expander grid; causal history is fine either way)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 dropout_p (MC dropout applied on inputs+recurrent): 
\f1\b [0.1, 0.2, 0.3, 0.4]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 recurrent_dropout_p: 
\f1\b [0.0, 0.1, 0.2]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 head_dropout_p (before linear heads): 
\f1\b [0.0, 0.1]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 activation_in_heads: 
\f1\b [linear]
\f0\b0  (fixed; regression)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 mc_passes_eval (T stochastic forward passes at eval): 
\f1\b [20, 50, 100]
\f3\b0\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 8.2\'a0\'a0\'a0\'a0\'a0 Training / optimization\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 optimizer: 
\f1\b [Adam, AdamW]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 learning_rate: 
\f1\b [1e-4, 3e-4, 1e-3]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 weight_decay: 
\f1\b [0, 1e-5, 1e-4]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 batch_size: 
\f1\b [64, 128, 256]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 grad_clip_norm: 
\f1\b [0.5, 1.0, 2.0]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 loss:
\f3\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f1\b\fs29\fsmilli14667 [MSELoss, HuberLoss(\uc0\u948 =1.0)]
\f0\b0  (start with same loss for all 6 heads)
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 scheduler: 
\f1\b [None, CosineAnnealingWarmRestarts(T\uc0\u8320 =5), OneCycleLR]
\f3\b0\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 8.3\'a0\'a0\'a0\'a0\'a0 Data & normalization (per-feature, fit on train only)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 feature_scaler: 
\f1\b [StandardScaler, RobustScaler]
\f3\b0\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 target_transform: 
\f1\b [identity, z-score]
\f0\b0  (keep simple first)
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 8.4\'a0\'a0\'a0\'a0\'a0 Early stopping / validation (time-series aware)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\fs26\fsmilli13333 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 early_stopping_patience: 
\f1\b [5, 10]
\f0\b0  (monitor val RMSE averaged across 6 heads)
\f3\fs32 \

\f0\fs26\fsmilli13333 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 val_split: last 
\f1\b [10%, 20%]
\f0\b0  of training span (blocked, no shuffle)
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 Defining the Bayesian LSTM Model \
\pard\pardeftab720\li480\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 9.1\'a0\'a0\'a0\'a0\'a0 Rank and pick winners (principled, reproducible)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Define a single selection score across the 6 horizons. Example (weights favoring longer horizons\'97tune if needed):
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 Score = \uc0\u931 
\f11 \uc0\u7522 
\f0  w
\f11 \uc0\u7522 
\f0  \'b7 RMSE
\f11 \uc0\u7522 
\f0  with w = [0.1, 0.15, 0.2, 0.2, 0.2, 0.15] for [10,30,60,90,120,240s]
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Tie-breakers (in order): (a) calibration error (see 9.2), (b) latency (forward-pass time \'d7 MC passes), (c) smaller model (fewer params), (d) stability across seeds (std of score over 3 seeds).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Lock a global random seed set (e.g., \{13, 37, 2025\}). Re-run the top ~5 configs with those seeds and average; keep the most stable.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.2\'a0\'a0\'a0\'a0\'a0 Check uncertainty quality (not just error)\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 For each horizon:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Calibration
\f0\b0 : reliability curve of predicted \'b5\'b1\uc0\u963  vs empirical coverage; report Expected Calibration Error for intervals (ECE_PI at 60/80/90%).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Sharpness
\f0\b0 : average predictive \uc0\u963  (smaller is better at the same coverage).\u8232 Prefer configs that achieve near-nominal coverage with minimal \u963 .
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.3\'a0\'a0\'a0\'a0\'a0 Sanity checks before freezing\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Learning curves
\f0\b0  (train vs val): ensure no unresolved overfit/underfit.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Residual diagnostics
\f0\b0 : plot residuals vs time, volatility, and price level; look for structure.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Leakage audit
\f0\b0 : confirm blocked/chronological split and scaler fitted only on the train span.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.4\'a0\'a0\'a0\'a0\'a0 Local \'93exploitation\'94 search around the best\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 Run a 
\f1\b small fine grid
\f0\b0  around the winner:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 hidden_size: best \'b1 one step (e.g., if 64 won, try 48 & 96)
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 dropout_p: \'b10.1
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 lr: \'d7\{0.7, 1.0, 1.4\}
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 mc_passes_eval: \{best, best\'d72\} (only if latency allows)\uc0\u8232 Keep batch size & layers fixed unless you see training instability.
\f3\fs32 \
\pard\pardeftab720\sl613\sa106\partightenfactor0

\f0\fs53\fsmilli26667 \cf4 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 9.5\'a0\'a0\'a0\'a0\'a0 Finalize model\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Refit the 
\f1\b final config
\f0\b0  on 
\f1\b train+val
\f0\b0  (same preprocessing).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Evaluate 
\f1\b once
\f0\b0  on the untouched 
\f1\b test
\f0\b0  span; report:
\f3\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 RMSE/MAE per horizon
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Coverage@\{60,70,80,90\}% and sharpness
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Inference latency per tick (single pass) and effective latency with MC passes
\f3\fs32 \
\pard\pardeftab720\li1920\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.6\'a0\'a0\'a0\'a0\'a0 Backtest with trading logic (paper mode)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Use your existing pipeline: apply transaction costs, slippage, and your Kelly logic.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Log per minute: total equity, positions, filled trades, and all 6 Kelly fractions.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Acceptance gates (example\'97tune to your spec):
\f3\fs32 \
\pard\pardeftab720\li1920\fi-480\sa320\partightenfactor0

\f7\fs26\fsmilli13333 \cf2 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Max drawdown \uc0\u8804  target (e.g., \u8804 8\'9612% in your 30-min sessions)
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Calibrated coverage within \'b13\'965% of nominal for 70\'9690%
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 Profit factor > 1.2 and Sharpe > 1 (net of costs)
\f3\fs32 \

\f7\fs26\fsmilli13333 o
\f3\fs18\fsmilli9333 \'a0\'a0 
\f0\fs29\fsmilli14667 End-of-session flatness satisfied 100%
\f3\fs32 \
\pard\pardeftab720\li1920\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.7\'a0\'a0\'a0\'a0\'a0 Optional boosts if backtest underwhelms\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Ensembling
\f0\b0 : same arch, 3 seeds; average means and variances (law of total variance).
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Heteroscedastic head
\f0\b0 : predict log-variance per horizon (\'b5, log\uc0\u963 \'b2) instead of MC-only.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Feature ablations
\f0\b0 : drop groups (on-chain vs order-book) to spot dead weight.
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Scheduler on/off
\f0\b0  trials (Cosine vs OneCycle) just for the finalist.
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 9.8\'a0\'a0\'a0\'a0\'a0 Production hardening\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\fs26\fsmilli13333 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Export: model weights + exact preprocessing params + versioned config.json.
\f3\fs32 \

\f0\fs26\fsmilli13333 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Add runtime checks: input schema/NaNs/scale drift; fallbacks if latency spikes.
\f3\fs32 \

\f0\fs26\fsmilli13333 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Observability: write a compact JSON log per tick (predictions, \uc0\u963 , Kelly, fills).
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 10\'a0\'a0\'a0\'a0\'a0 Applying Enhanced Methods for Bayesian LSTM model\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 10.1\'a0\'a0 Attention Mechanisms & Multi-Head Architecture\
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Self-Attention
\f0\b0 : Allows the model to focus on the most relevant timesteps in the 240-step sliding window. For crypto trading, this helps identify key price movements or volume spikes that predict future moves.
\fs32 \

\f1\b\fs29\fsmilli14667 Multi-Head Attention
\f0\b0 : Uses 8 different attention heads to capture different types of relationships - one head might focus on price patterns, another on volume correlations, another on order book imbalances.
\fs32 \

\f1\b\fs29\fsmilli14667 Feature Relationship Attention
\f0\b0 : Helps the model understand relationships between the different input features (L1/L2 order book data, blockchain metrics, price history).
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 10.2\'a0\'a0 Ensemble Methods \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Ensemble methods
\f0\b0  combine multiple Bayesian LSTM models to create more robust predictions. 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 \uc0\u8232 10.2.1\'a0 Basic Ensemble Strategy\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Train 5-10 different Bayesian LSTM models with slight architectural variations
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Each model learns slightly different patterns in the crypto data
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Combine their predictions to reduce overfitting and improve reliability\uc0\u8232 \u8232 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.2.2\'a0 Advanced Ensemble Benefits\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Epistemic Uncertainty
\f0\b0 : Disagreement between models indicates model uncertainty
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Robustness
\f0\b0 : If one model fails on unusual market conditions, others compensate
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Calibrated Confidence
\f0\b0 : When models agree, you can trade with higher position sizes\uc0\u8232 \u8232 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.2.3\'a0 Specialized Ensemble\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Different models can specialize in different prediction horizons - short-term models focus on immediate price movements while long-term models capture broader trends.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 10.3\'a0\'a0 LSTM + Transformer Hybrid Architecture\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The hybrid approach combines the strengths of both architectures:
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.3.1\'a0 LSTM Component (Sequential Processing)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Processes the 240-timestep sliding window sequentially
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Captures temporal dependencies and trends in price movements
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Handles the time-series nature of the crypto data naturally\uc0\u8232 \u8232 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.3.2\'a0 Transformer Component (Feature Relationships)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Models complex relationships between the input features
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Understands how order book depth relates to price movements
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Captures interactions between on-chain and off-chain data\uc0\u8232 \u8232 
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.3.3\'a0 Cross-Attention Integration\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The LSTM output serves as queries to attend over transformer-processed features
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 This allows the model to focus on relevant features based on sequential context
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Results in more informed predictions that consider both time and feature dimensions
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 10.4\'a0\'a0 Sophisticated Uncertainty Quantification\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The advanced uncertainty quantification provides multiple layers of uncertainty estimation:
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.4.1\'a0 Types of Uncertainty\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.4.1.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Epistemic Uncertainty
\f12\b  
\f2\b0 (Model Uncertainty)
\f0\i0 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 How confident is the model in its predictions?
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Estimated through Monte Carlo Dropout or ensemble disagreement
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 High epistemic uncertainty suggests the model hasn't seen similar market conditions
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.4.1.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Aleatoric Uncertainty (Data Uncertainty)\
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\i0\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 How noisy is the data itself?
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Captured by the model predicting both mean and variance
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Represents inherent unpredictability in crypto markets
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf2 Total Uncertainty
\f0\b0  = Epistemic + Aleatoric
\f3 \

\f0 \'a0
\f3 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 10.4.2\'a0 Key Enhancements\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Market-Adaptive Uncertainty
\f0\b0 : Adjusts uncertainty based on current volatility and liquidity conditions
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Historical Calibration
\f0\b0 : Uses past prediction performance to calibrate uncertainty estimates
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Quantile Predictions
\f0\b0 : Provides full predictive distributions, not just point estimates
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Uncertainty Decomposition
\f0\b0 : Tells you whether uncertainty comes from model confusion or market noise
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0 \cf2 \'a0
\f3 \

\f0 \'a0
\f3 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 10.5\'a0\'a0 Implementation Strategy\
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 1.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Start with Enhanced Bayesian LSTM
\f0\b0 : Implement the attention mechanisms first\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 2.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Add Ensemble Methods
\f0\b0 : Train 3-5 models with different architectures\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 3.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Implement Comprehensive Uncertainty
\f0\b0 : Use the advanced uncertainty quantification\uc0\u8232 \u8232 
\f3\fs32 \

\f0\fs29\fsmilli14667 4.
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Test Hybrid Architecture
\f0\b0 : If computational resources allow, experiment with the LSTM-Transformer hybrid
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 The uncertainty quantification is particularly crucial for crypto trading because it helps to:
\f3\fs32 \
\pard\pardeftab720\li480\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Size positions appropriately based on prediction confidence
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Avoid trading during high-uncertainty periods
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Distinguish between model uncertainty (retrain needed) and market uncertainty (inherent noise)
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 \'a0\
11\'a0\'a0\'a0\'a0\'a0 Combining the Data of Technical Indicators and Sentiment Data to the Bayesian LSTM model prediction \
\pard\pardeftab720\sa213\partightenfactor0

\f13\b\fs36 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.1\'a0\'a0 Technical Indicators That Add Real Value\
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Order Flow Imbalance Acceleration
\f0\b0  Your system already tracks volume imbalance, but the 
\f2\i rate of change
\f0\i0  of this imbalance is predictive. When bid-side pressure accelerates rapidly over 2-3 intervals, it often precedes price jumps by 6-10 seconds. This derivative information helps your LSTM anticipate momentum shifts rather than just observing current state.
\fs32 \

\f1\b\fs29\fsmilli14667 Microstructure Volatility Ratio
\f0\b0  Calculate the ratio between price volatility at your 1-second resolution versus 10-second resolution. When micro-volatility exceeds macro-volatility, it signals brewing instability that traditional volatility measures miss. This is particularly valuable for your 30-60 second predictions.
\fs32 \

\f1\b\fs29\fsmilli14667 Order Book Depth Weighted Momentum
\f0\b0  Unlike simple price momentum, weight recent price changes by the order book depth at which they occurred. Moves through thin order books mean less than moves through thick ones. Your LSTM sees the raw data but this explicit calculation helps it understand price move "quality."
\fs32 \

\f1\b\fs29\fsmilli14667 Cross-Exchange Arbitrage Signals
\f0\b0  Track Litecoin price differentials between major exchanges (Binance, Coinbase, Kraken). When spreads widen beyond transaction costs, arbitrage bots activate, creating predictable price convergence patterns over 30-120 seconds. Your single-exchange LSTM cannot see this.
\fs32 \

\f1\b\fs29\fsmilli14667 Liquidation Proximity Indicators
\f0\b0  Calculate distance to major liquidation clusters using open interest data. When price approaches levels with concentrated leveraged positions, volatility increases predictably. This forward-looking indicator helps anticipate volatility spikes your historical patterns might miss.
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.2\'a0\'a0 Sentiment Data That Actually Matters\
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Perpetual Funding Rate Momentum
\f0\b0  Not just the current funding rate, but its rate of change across exchanges. Rapidly shifting funding rates indicate changing market positioning that precedes price moves by minutes. This captures institutional sentiment shifts.
\fs32 \

\f1\b\fs29\fsmilli14667 Whale Accumulation/Distribution Score
\f0\b0  Beyond your basic whale transaction counts, classify whether large addresses are accumulating (moving off exchanges) or distributing (moving to exchanges). Weight by wallet age and historical accuracy. Old whale wallets moving coins to exchanges is highly predictive.
\fs32 \

\f1\b\fs29\fsmilli14667 Options Flow Skew
\f0\b0  Track the ratio of call vs put volume in Litecoin options, weighted by strike distance from current price. Unusual options activity often precedes spot price movements by 5-30 minutes as market makers hedge.
\fs32 \

\f1\b\fs29\fsmilli14667 Social Velocity Indicator
\f0\b0  Not just mention volume, but the acceleration of mentions across crypto-specific platforms (not general Twitter). Sudden acceleration in discussion, especially with consistent sentiment direction, precedes retail-driven moves.
\fs32 \

\f1\b\fs29\fsmilli14667 Exchange Inflow/Outflow Ratio
\f0\b0  Track the ratio of Litecoin flowing into exchanges versus flowing out, with a decay factor for time since movement. This captures immediate selling/holding pressure that affects near-term price.
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.3\'a0\'a0 The Integration Strategy: Hierarchical Fusion\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Here's how to combine these signals with your Bayesian LSTM predictions for maximum effectiveness:
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i\fs32 \cf4 11.3.1\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Level 1: Parallel Processing Streams\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Run three parallel prediction streams:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls8\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
Your core Bayesian LSTM using existing features
\fs32 \
\ls8\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Technical indicator-enhanced predictions
\fs32 \
\ls8\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Sentiment-weighted predictions
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Each stream produces its own price distribution for each time horizon. This separation lets you measure the independent value of each information type.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.3.2\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Level 2: Confidence-Weighted Fusion\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Don't simply average the predictions. Instead, weight them by their recent accuracy and current confidence:
\fs32 \

\fs29\fsmilli14667 For each prediction horizon, calculate a dynamic weight based on:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls9\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Rolling 100-prediction accuracy score for each stream
\fs32 \
\ls9\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Current uncertainty (Bayesian variance) from each model
\fs32 \
\ls9\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Market regime (trending/ranging) which favors different streams
\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.3.3\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Level 3: Conditional Override Logic\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Certain signals should override the standard fusion when they reach extreme levels:
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Hard Override Conditions:
\f0\b0\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls10\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When liquidation proximity indicator shows >$10M in liquidations within 2% of current price, increase weight of technical stream to 70% for short-term predictions
\fs32 \
\ls10\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When whale distribution score exceeds 90th percentile, increase sentiment weight to 60% for all horizons
\fs32 \
\ls10\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When cross-exchange arbitrage exceeds 0.5%, focus 80% weight on mean reversion predictions
\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.3.4\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Level 4: Temporal Alignment Strategy\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Different signals have different optimal lead times:
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Immediate (0-30 seconds)
\f0\b0 : Order flow acceleration, microstructure volatility 
\f1\b Short-term (30-120 seconds)
\f0\b0 : Liquidation proximity, arbitrage signals\uc0\u8232 
\f1\b Medium-term (120-240 seconds)
\f0\b0 : Funding rates, whale movements, social velocity
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Align each signal with the prediction horizon where it has maximum predictive power. Don't force 240-second sentiment signals to influence 10-second predictions.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.4\'a0\'a0 The Kelly Criterion Integration\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The combined system provides richer information for Kelly calculations:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.4.1\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Enhanced Probability Estimation \
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Instead of single Gaussian distribution, you now have three distributions (LSTM, technical, sentiment) that you can combine into a mixture model. This gives more accurate tail probabilities.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.4.2\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Confidence Scaling
\fs29\fsmilli14667  
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 When all three streams agree on direction, increase Kelly fraction. When they disagree, reduce it. This natural confidence measure prevents overtrading during uncertain conditions.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 11.4.3\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Volatility Regime Adjustment \
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Use the microstructure volatility ratio to dynamically adjust Kelly scaling. High micro-volatility suggests reducing position sizes regardless of signal strength.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.5\'a0\'a0 Practical Implementation Sequence\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Start with these high-impact additions in order:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls11\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
Add liquidation proximity and cross-exchange arbitrage (clear alpha, easy to implement)
\fs32 \
\ls11\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Integrate perpetual funding momentum and whale accumulation scores
\fs32 \
\ls11\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Implement parallel prediction streams and basic fusion
\fs32 \
\ls11\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
Add microstructure indicators and confidence weighting
\fs32 \
\ls11\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
Introduce override logic and temporal alignment
\fs32 \
\ls11\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
Fine-tune fusion weights using backtest performance
\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 11.6\'a0\'a0 Why This Specific Combination Works\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The indicators selected share three characteristics:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls12\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
They capture information not visible in single-exchange price/volume data
\fs32 \
\ls12\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
They have different decay times that align with the prediction horizons
\fs32 \
\ls12\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
They're calculable within your 1-second update cycle
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The fusion strategy respects that the Bayesian LSTM is already powerful, using additional signals to enhance rather than replace its predictions. The hierarchical approach means you can measure exactly how much value each component adds and adjust accordingly.
\fs32 \

\fs29\fsmilli14667 The key insight is that your LSTM excels at learning patterns from consistent data streams, while discrete indicators excel at capturing regime changes and external shocks. By combining them thoughtfully rather than dumping everything into one model, you get the best of both approaches.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 12\'a0\'a0\'a0\'a0\'a0 Enhanced Time-Horizon Prediction Strategy\
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs48 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.1\'a0\'a0 Problem Statement\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Single-moment predictions using only current on-chain and off-chain data suffer from excessive noise sensitivity across all prediction horizons. This noise contamination degrades prediction accuracy and creates unreliable trading signals, particularly for longer-term forecasts that should exhibit greater stability.
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.2\'a0\'a0 Theoretical Foundation\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The enhanced prediction strategy operates on the principle that 
\f1\b optimal historical context varies by prediction horizon and market conditions
\f0\b0 . Rather than using fixed historical windows, the system implements adaptive attention mechanisms that allow the Bayesian LSTM to learn optimal temporal weighting patterns for each forecast horizon.
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.3\'a0\'a0 Adaptive Attention Architecture\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.3.1\'a0 Core Design Principles\
\pard\pardeftab720\sa213\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Unified Historical Buffer
\f0\b0 : All prediction horizons access the same 20-minute rolling buffer of historical data, ensuring consistent information availability and computational efficiency.
\fs32 \

\f1\b\fs29\fsmilli14667 Learnable Temporal Attention
\f0\b0 : Each prediction horizon employs dedicated attention mechanisms that learn to weight historical data points based on their relevance to the specific forecast timeframe.
\fs32 \

\f1\b\fs29\fsmilli14667 Market-State Conditioning
\f0\b0 : Attention patterns adapt dynamically based on real-time market volatility, liquidity conditions, and trading session characteristics.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.3.2\'a0 Mathematical Framework\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The attention mechanism for each prediction horizon is defined through the following mathematical formulation:
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.3.2.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Market State Encoding\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f14\b\fs29\fsmilli14667 \cf9 \'a0
\f0\b0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 s_t = [volatility_t, liquidity_t, spread_t, volume_imbalance_t]
\f0 \

\f7 \uc0\u966 (s_t) = tanh(W_market \'b7 s_t + b_market)
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls13\ilvl0
\f14\b\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91s_t\'92
\f7\b0 :
\f0  Market state vector at time \'91
\f7 t\'92
\f0\fs32 \
\ls13\ilvl0
\f14\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91\uc0\u966 (s_t)\'92
\f0\b0 : Market state transformation (output dimension: \'91
\f7 d_market\'92
\f0 )
\fs32 \
\ls13\ilvl0
\f14\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91W_market\'92
\f0\b0 : Transformation \'91
\f7 matrix [d_market \'d7 4]\'92
\f0\fs32 \
\ls13\ilvl0
\f14\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91b_market\'92
\f0\b0 : Bias vector \'91
\f7 [d_market \'d7 1]\'92
\f0\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\f7\fs29\fsmilli14667 \cf2 \'a0
\f0\fs32 \

\f7\fs29\fsmilli14667 \'a0
\f0\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.3.2.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Temporal Decay Function\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f7 \cf2 \uc0\u964 _h(t) = exp(-\u955 _h \'b7 (t_current - t) / 60)
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls14\ilvl0
\f1\b\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91\uc0\u964 _h(t)\'92
\f0\b0 : Temporal decay weight for horizon \'91h\'92 at timestep \'91t\'92
\fs32 \
\ls14\ilvl0
\f1\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91\uc0\u955 _h\'92 
\f0\b0 : Learnable decay rate parameter for horizon h
\fs32 \
\ls14\ilvl0
\f1\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91(t_current \'96 t)\'92
\f0\b0 : Time difference in seconds
\fs32 \
\ls14\ilvl0
\f1\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'9160\'92
\f0\b0 : Normalization factor (converts to minutes)
\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.3.2.3\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Attention Score Calculation\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f7 \cf2 score(t, h) = w_h^T \'b7 \uc0\u966 (s_t) + \u945 _h \'b7 \u964 _h(t) + \u946 _h
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls15\ilvl0
\f14\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91w_h\'92
\f0\b0 : 
\fs29\fsmilli14667 Parameter vector for horizon
\fs32  \'91
\f7 h [d_market \'d7 1]\'92
\f0 \
\ls15\ilvl0
\f14\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91\uc0\u945 _h\'92
\f0\b0 : 
\fs29\fsmilli14667 Learnable scaling factor for temporal component
\fs32 \
\ls15\ilvl0
\f14\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91\uc0\u946 _h\'92
\f7\b0 :
\f0  
\fs29\fsmilli14667 Bias term for horizon
\fs32  \'91
\f7 h
\f0 \'92\
\ls15\ilvl0
\f14\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91w_h^T \'b7 \uc0\u966 (s_t)\'92
\f7\b0 :
\f0  
\fs29\fsmilli14667 Dot product yielding market state relevance score
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.3.2.4\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Final Attention Weights\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f7 \cf2 Attention_weight(t, h) = softmax_t(score(t, h))
\f0 \

\f7 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = exp(score(t, h)) / \uc0\u931 _\{t'=1\}^\{T\} exp(score(t', h))
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls16\ilvl0
\f14\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91T\'92
\f0\b0 : 
\fs29\fsmilli14667 Total timesteps in 20-minute buffer (T = 1200 for 1-second intervals)
\fs32 \
\ls16\ilvl0
\f14\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91softmax_t\'92
\f0\b0 : 
\fs29\fsmilli14667 Normalization across all timesteps for horizon
\fs32  \'91
\f7 h
\f0 \'92\
\pard\pardeftab720\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.3.2.5\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Historical Context Integration\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f7 \cf2 context_h = \uc0\u931 _\{t=1\}^\{T\} Attention_weight(t, h) \'b7 features_t
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls17\ilvl0
\f14\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91context_h\'92
\f0\b0 : 
\fs29\fsmilli14667 Weighted historical context vector for horizon 
\f7\fs32 \'91h\'92
\f0 \
\ls17\ilvl0
\f14\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'91features_t\'92
\f7\b0 :
\f0  
\fs29\fsmilli14667 Complete feature vector at timestep
\fs32  
\f7 \'91t\'92
\f0 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 \'a0\
\'a0\
12.3.3\'a0 Attention Mechanism Properties\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Probability Distribution
\f0\i0 \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Attention weights sum to 1 across all timesteps:
\fs32 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 \uc0\u931 _\{t=1\}^\{T\} Attention_weight(t, h) = 1
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\partightenfactor0

\fs26\fsmilli13333 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Non-Negative Weights
\f0\i0 \cf2  \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 All attention weights are non-negative due to softmax:
\fs32 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 Attention_weight(t, h) \uc0\u8805  0 
\f5 \uc0\u8704 
\f7 t, h
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\partightenfactor0

\fs26\fsmilli13333 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Differentiable 
\f0\i0 \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 All components are differentiable, enabling end-to-end training via backpropagation.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.4\'a0\'a0 Adaptive Weighting Strategies\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.4.1\'a0 Volatility-Responsive Attention\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 During high volatility periods, the market state vector \'91
\f7\fs32 s_t\'92 
\f0\fs29\fsmilli14667 reflects increased volatility, causing \'91
\f7\fs32 \uc0\u966 (s_t)\'92
\f0\fs29\fsmilli14667  to emphasize recent data through larger dot product values with \'91
\f7\fs32 w_h\'92
\f0\fs29\fsmilli14667 . The mathematical relationship:
\fs32 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 High volatility \uc0\u8594  Large \'91
\f7\fs32 \uc0\u966 (s_t)\'92 
\f0\fs29\fsmilli14667 \uc0\u8594  Higher scores for recent 
\f7\fs32 \'91t\'92
\f0\fs29\fsmilli14667  \uc0\u8594  Concentrated attention on recent data
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.4.2\'a0 Liquidity-Conditional Weighting\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 When liquidity is low (thin order books), the market state transformation 
\f7\fs32 \'91\uc0\u966 (s_t)\'92
\f0\fs29\fsmilli14667  adjusts to increase attention on immediate price movements:
\fs32 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 Low liquidity \uc0\u8594  
\f7\fs32 \'91\uc0\u966 (s_t)\'92
\f0\fs29\fsmilli14667  emphasizes recent patterns \uc0\u8594  Higher 
\f7\fs32 \'91w_h^T \'b7 \uc0\u966 (s_t)\'92
\f0\fs29\fsmilli14667  for recent 
\f7\fs32 \'91t\'92
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.4.3\'a0 Horizon-Specific Temporal Patterns\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Different horizons learn distinct temporal decay patterns through their \uc0\u955 _h parameters:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls18\ilvl0
\f1\b\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Short horizons (10s, 30s)
\f0\b0 : Learn larger 
\f7\fs32 \'91\uc0\u955 _h\'92
\f0\fs29\fsmilli14667  values \uc0\u8594  Faster decay \u8594  Focus on recent data
\fs32 \
\ls18\ilvl0
\f1\b\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Long horizons (120s, 240s)
\f0\b0 : Learn smaller 
\f7\fs32 \'91\uc0\u955 _h\'92
\f0\fs29\fsmilli14667  values \uc0\u8594  Slower decay \u8594  Broader temporal context
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs48 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.5\'a0\'a0 Implementation Architecture\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.5.1\'a0 Phase 1: Baseline Implementation\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Parameter Initialization
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 \'91\uc0\u955 _h = log(h/10)\'92 
\f0\fs29\fsmilli14667 \'a0# Horizon-appropriate initial decay rates
\fs32 \

\f7 \'91w_h ~ N(0, 0.01)\'92 
\f0\fs29\fsmilli14667 # Small random initialization
\fs32 \

\f7 \'91\uc0\u945 _h = 1.0\'92
\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Unity temporal scaling
\fs32 \

\f7 \'91\uc0\u946 _h
\f0  = 0.0
\f7 \'92
\fs29\fsmilli14667 \'a0\'a0 
\f0 \'a0\'a0\'a0\'a0\'a0# Zero bias initialization
\fs32 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Buffer Structure 
\f0\i0 \cf2 \
Maintain circular buffer of size T = 1200 (20 minutes \'d7 60 seconds) with automatic oldest-data removal.\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.5.2\'a0 Phase 2: Horizon-Specific Attention Training\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Loss Function Enhancement
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 L_total = L_prediction + \uc0\u955 _reg \'b7 L_regularization
\f0 \

\f7 \'a0
\f0 \

\f7 L_regularization = \uc0\u931 _h ||w_h||\'b2 + \u931 _h |\u955 _h - \u955 _\{h-1\}|\'b2
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Where
\fs32  
\f7 \'91L_regularization\'92
\f0  
\fs29\fsmilli14667 prevents overfitting and encourages smooth parameter transitions between adjacent horizons.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.5.3\'a0 Phase 3: Market-Adaptive Conditioning\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Real-Time Market State Calculation
\f0\i0 \cf2 \
\pard\pardeftab720\li480\fi-480\partightenfactor0

\f4 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f7\fs32 volatility_t = std(price_\{t-30:t\})\uc0\u8232 \u8232 
\f0 \

\f4 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f7\fs32 liquidity_t = (bid_volume_t + ask_volume_t) / 2\uc0\u8232 \u8232 
\f0 \

\f4 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f7\fs32 spread_t = (ask_price_t - bid_price_t) / mid_price_t\uc0\u8232 \u8232 
\f0 \

\f4 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f7\fs32 volume_imbalance_t = (bid_volume_t - ask_volume_t) / (bid_volume_t + ask_volume_t)
\f0 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 \'a0
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Dynamic Parameter Updates 
\f0\i0 \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Update 
\f7\fs32 \'91\uc0\u966 (s_t)\'92
\f0\fs29\fsmilli14667  computation every second using rolling statistics.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.5.4\'a0 Phase 4: Continuous Calibration\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Attention Pattern Analysis
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 attention_entropy_h = -\uc0\u931 _t Attention_weight(t, h) \'b7 log(Attention_weight(t, h))
\f0 \

\f7 \'a0
\f0 \

\f7 effective_window_h = exp(attention_entropy_h)
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \uc0\u8232 These metrics track whether attention patterns are appropriately concentrated or dispersed.
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs48 \cf2 \'a0
\f0\b0\fs32 \

\f1\b\fs48 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.6\'a0\'a0 Historical Data Buffer Management\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.6.1\'a0 Buffer Architecture Specifications\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.6.1.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Memory Layout\
\pard\pardeftab720\partightenfactor0

\fs26\fsmilli13333 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Buffer size: 1200 timesteps \'d7 N_features\uc0\u8232 \u8232 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Memory requirement: ~10-50 MB depending on feature count\uc0\u8232 \u8232 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Update frequency: 1 Hz (every second)
\fs32 \
\pard\pardeftab720\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Circular Buffer Implementation:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7\fs29\fsmilli14667 \cf9 class HistoricalBuffer:
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0 def __init__(self, size=1200, n_features=50):
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.data = np.zeros((size, n_features))
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.timestamps = np.zeros(size)
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.head = 0
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.full = False
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0 
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0 def update(self, new_features, timestamp):
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.data[self.head] = new_features
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.timestamps[self.head] = timestamp
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.head = (self.head + 1) % self.size
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 if self.head == 0:
\f0\fs32 \cf2 \

\f7\fs29\fsmilli14667 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.full = True
\f0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0
\f0\fs32 \cf2 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.6.1.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Computational Complexity\
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Per-Second Operations:
\f0\i0 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls19\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Attention weight calculation: O(T \'d7 H) where T=1200, H=6 horizons\uc0\u8232 \u8232 
\fs32 \
\ls19\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Context aggregation: O(T \'d7 H \'d7 F) where F=feature dimension\uc0\u8232 \u8232 
\fs32 \
\ls19\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Total complexity: O(7200 \'d7 F) per prediction cycle
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Memory Access Pattern
\f0\b0 : Sequential buffer access enables efficient CPU cache utilization and GPU memory coalescing.
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.7\'a0\'a0 Mathematical Validation\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.7.1\'a0 Attention Weight Properties\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Conservation Property:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 \uc0\u8706 /\u8706 w_h (\u931 _t Attention_weight(t, h)) = 0
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Gradient of attention sum is zero, confirming proper normalization preservation during training.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Temporal Smoothness:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 E[|Attention_weight(t, h) - Attention_weight(t-1, h)|] 
\f5 \uc0\u8733 
\f7  1/\uc0\u945 _h
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Expected attention smoothness inversely related to temporal scaling factor.
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.7.2\'a0 Convergence Guarantees\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Gradient Bounds:
\f0\i0  \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 All gradients are bounded due to:
\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa213\partightenfactor0
\ls20\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Softmax normalization
\f7\fs32 :\'91|\uc0\u8706  softmax/\u8706 x| \u8804  0.25\'92\u8232 \u8232 
\f0 \
\ls20\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Tanh activation: 
\f7\fs32 \'91|\uc0\u8706  tanh/\u8706 x| \u8804  1\'92\u8232 \u8232 
\f0 \
\ls20\ilvl0
\fs29\fsmilli14667 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Exponential decay: 
\f7\fs32 \'91|\uc0\u8706  exp(-\u955 x)/\u8706 \u955 | \u8804  x \'b7 exp(-\u955 x) (bounded for finite x)\'92
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs48 \cf2 \'a0
\f0\b0\fs32 \

\f1\b\fs48 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.8\'a0\'a0 Performance Validation Framework\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.8.1\'a0 Training Metrics\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Attention Pattern Coherence:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 coherence_h = 1 - (1/T) \'b7 \uc0\u931 _t |Attention_weight(t, h) - smooth_attention(t, h)|
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Cross-Horizon Consistency:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 consistency(h1, h2) = correlation(attention_pattern_h1, attention_pattern_h2)
\f0 \
\pard\pardeftab720\partightenfactor0

\fs26\fsmilli13333 \cf2 \'a0
\fs32 \

\fs26\fsmilli13333 \'a0
\fs32 \

\fs26\fsmilli13333 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.8.2\'a0 Backtesting Validation\
\pard\pardeftab720\sa213\partightenfactor0
\cf3 Prediction Stability Metric:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 stability_h = 1 - std(prediction_h) / std(actual_price)
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\sa213\partightenfactor0

\f2\i \cf3 Noise Reduction Effectiveness:
\f0\i0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f7 \cf2 noise_reduction = (SNR_after - SNR_before) / SNR_before
\f0 \

\f7 where SNR = signal_variance / noise_variance
\f0 \

\f7 \'a0
\f0 \

\f7 \'a0
\f0 \

\f7 \'a0
\f0 \

\f7 \'a0
\f0 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.9\'a0\'a0 Integration with Bayesian LSTM\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.9.1\'a0 Architecture Integration\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The attention-weighted historical context integrates with the Bayesian LSTM through:
\fs32 \
\pard\pardeftab720\partightenfactor0

\f7\fs26\fsmilli13333 \cf9 class AttentionBayesianLSTM(nn.Module):
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0 def forward(self, current_features, historical_buffer):
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Calculate attention weights for all horizons
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 attention_weights = self.calculate_attention(historical_buffer)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Create horizon-specific contexts
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 contexts = \{\}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 for h in self.horizons:
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 contexts[h] = torch.sum(
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 attention_weights[h].unsqueeze(-1) * historical_buffer, 
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dim=0
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 )
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # LSTM forward pass with concatenated context
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 lstm_input = torch.cat([current_features, contexts[h]], dim=-1)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 lstm_out = self.lstm(lstm_input)
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 # Multi-head predictions
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 predictions = \{h: self.heads[h](lstm_out) for h in self.horizons\}
\f0\fs32 \cf2 \

\f7\fs26\fsmilli13333 \cf9 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 return predictions, attention_weights
\f0\fs32 \cf2 \
\pard\pardeftab720\sa213\partightenfactor0

\f1\b\fs36 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 12.9.2\'a0 Kelly Fraction Enhancement\cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The attention mechanism stabilizes the per
\f5 \uc0\u8209 
\f0 horizon uncertainty used by Kelly by shrinking raw variance according to attention concentration.
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa213\qc\partightenfactor0

\f7\fs37\fsmilli18667 \cf2 \uc0\u963 
\fs31\fsmilli15556 \sub stable,h
\fs37\fsmilli18667 \nosupersub  = \uc0\u963 
\fs31\fsmilli15556 \sub raw,h
\fs37\fsmilli18667 \nosupersub  \'b7 (1 \uc0\u8722  attention_concentration
\fs31\fsmilli15556 \sub h
\fs37\fsmilli18667 \nosupersub )
\f0\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.9.2.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Definitions\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f7\b0\fs32 \uc0\u963 
\fs26\fsmilli13333 \sub raw,h
\fs32 \nosupersub :
\f0\fs29\fsmilli14667  raw standard deviation predicted at horizon h.
\fs32 \
\pard\pardeftab720\li960\fi-960\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f7\b0\fs32 attention_concentration
\fs26\fsmilli13333 \sub h
\f0\fs29\fsmilli14667 \nosupersub : a normalized confidence score in [0,1] derived from attention entropy (higher concentration 
\f5 \uc0\u8658 
\f0  higher confidence). For example:
\fs32 \
\pard\pardeftab720\sl368\sa213\qc\partightenfactor0

\f7 \cf2 attention_concentration
\fs26\fsmilli13333 \sub h
\fs32 \nosupersub  = 1 \uc0\u8722  H
\fs26\fsmilli13333 \sub h
\fs32 \nosupersub  / log T
\f0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f7\b0\fs32 \uc0\u963 
\fs26\fsmilli13333 \sub stable,h
\f0\fs29\fsmilli14667 \nosupersub : stability
\f5 \uc0\u8209 
\f0 adjusted standard deviation used for Kelly at horizon h.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.9.2.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Constraints\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Enforce 
\f7\b0\fs32 attention_concentration
\fs26\fsmilli13333 \sub h
\fs32 \nosupersub  
\f5 \uc0\u8712 
\f7  [0, 1]\'a0 (e.g., 1 \uc0\u8722  H
\fs26\fsmilli13333 \sub h
\fs32 \nosupersub  / log T).
\f0 \

\f1\b\fs29\fsmilli14667 \'95 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Clamp 
\f7\b0\fs32 \uc0\u963 
\fs26\fsmilli13333 \sub stable,h
\fs32 \nosupersub  \uc0\u8805  \u963 
\fs26\fsmilli13333 \sub min
\f0\fs29\fsmilli14667 \nosupersub  (e.g., 1\'d710
\fs24\fsmilli12222 \super \uc0\u8722 6
\fs29\fsmilli14667 \nosupersub ) to prevent degenerate variance.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 12.9.2.3\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Implementation Notes\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\li480\fi-480\sl337\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Compute attention entropy 
\f7\fs32 H_h 
\f0\fs29\fsmilli14667 over the 20
\f5 \uc0\u8209 
\f0 minute context used by the horizon
\f5 \uc0\u8209 
\f0 specific head.\uc0\u8232 \u8232 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 If attention is multi
\f5 \uc0\u8209 
\f0 head, average entropies or apply effective entropy over the concatenated weights.\uc0\u8232 \u8232 
\fs32 \
\pard\pardeftab720\li480\fi-480\sl337\sa213\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Use 
\f7\fs32 \uc0\u963 _stable,h
\f0\fs29\fsmilli14667  in place of 
\f7\fs32 \uc0\u963 _h 
\f0\fs29\fsmilli14667 when forming the Gaussian for the Kelly integral and for diagnostics.
\fs32 \
\pard\pardeftab720\li960\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 12.10\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Conclusion\
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The mathematically rigorous Enhanced Time-Horizon Prediction Strategy provides a theoretically sound and practically implementable approach to improving multi-horizon cryptocurrency price predictions. The attention mechanism's mathematical foundation ensures differentiability, convergence guarantees, and interpretable temporal weighting patterns while maintaining computational efficiency for real-time trading applications.
\fs32 \

\fs29\fsmilli14667 The formulation addresses the original noise sensitivity problem through learnable temporal patterns rather than arbitrary fixed windows, providing superior adaptability to changing market conditions while maintaining mathematical rigor required for reliable trading system deployment.
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 13\'a0\'a0\'a0\'a0\'a0 Setting Up Crypto Paper Trading System\
\pard\pardeftab720\li567\sl429\sa213\partightenfactor0

\f1\b\fs37\fsmilli18667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li480\sl368\partightenfactor0

\f1\b \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.1\'a0\'a0 Simulating Real-Time Trading\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The Paper Trading process will be performed based on real time off-chain crypto trading data collected from Binance API, the real time on-chain crypto data collected from the Litecoin blockchain node, and the pre-trained Bayesian LSTM Litecoin price prediction model.\'a0 
\fs32 \

\fs29\fsmilli14667 The prediction values are calculated for each \'91Prediction Horizon\'92 inside the \'91Sliding Window\'92 (\'91Prediction Horizons\'92 10, 30, 60, 90, 120, and 240 seconds from \'91the Moment Zero\'92). The \'91Sliding Window\'92 is going forward in 1-second time steps. Every time the \'91Sliding Window\'92 makes a new 1-second time step, real time trading data (off-chain data from Binance API) and real time on-chain data (from Litecoin node) is fed into the Bayesian LSTM prediction model, and the \'91Price Predictions\'92 for all the six \'91Prediction Horizons\'92 are generated at each 1-second time step.
\fs32 \

\fs29\fsmilli14667 Additionally, the Stop-Loss and Take-Profit Mechanisms are incorporated into the decision-making logic of the paper trading system. The purpose of implementing these risk management strategies is to limit losses and to lock in profits.
\fs32 \

\fs29\fsmilli14667 After the Paper Trading code has been launched, the code should ask the user for how long he wants the paper trading to last. The user gives the paper trading time as an input to the code. If duration is not provided, 
\f1\b default = 30 minutes
\f0\b0 . Validate user input: 
\f1\b 5 min \uc0\u8804  duration \u8804  8 h
\f0\b0 . Reject values outside this range with a clear error.
\fs32 \

\fs29\fsmilli14667 The capital amount when the Paper Trading session is starting is 10\'a0000 euros. 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa106\partightenfactor0

\fs29\fsmilli14667 \cf4 \'a0
\fs42\fsmilli21333 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.2\'a0\'a0 Real-Time Data Collecting and Saving During Paper Trading Process\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 During the paper trading process, two separate data collecting and saving processes are working simultaneously. The data collecting and saving process described in this chapter is made for collecting fresh on-chain and off-chain data to enable making the optimal price predictions. 
\fs32 \

\fs29\fsmilli14667 This data collecting and saving process is called \'93Data Collecting and Saving for Trading Process\'94.
\fs32 \

\fs29\fsmilli14667 The other data collecting and saving process is identical to the very first on-chain and off-chain data collecting and saving process that made the first training and testing of the Bayesian LSTM model possible. The Bayesian LSTM model is re-trained repetitively always after a 14-day of continuous and unbroken on-chain and off-chain data has been collected.\'a0 
\fs32 \

\fs29\fsmilli14667 This data collecting and saving process is called \'93Data Collecting and Saving for Re-Training the Bayesian LSTM Model\'94.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.2.1\'a0 Data Collecting and Saving for Trading Process\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The Parquet file created during a session is timestamped, e.g., 
\f2\i paper_trading_DDMMYYYY_HHMMSS.parquet
\f0\i0 . Data is saved at 1-second intervals. Each parameter has its own column; the first row contains headers identical to the column names.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Timestamp precision & timezone: 
\f0\b0 The first column is 
\f2\i timestamp
\f0\i0  (UTC, millisecond precision).
\fs32 \

\f1\b\fs29\fsmilli14667 Quantization & De-duplication Rule: 
\f0\b0 Snap each record 
\f1\b forward
\f0\b0  to the next whole-second tick. If multiple records map to the same tick, keep the one with the latest original timestamp (no look-ahead) and drop the others.
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 \'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f0\i0 \cf4 13.2.1.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Input Columns (explicit)\
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The following columns are written per second. This list replaces all cross-chapter references.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 Off-chain (Binance) \'97 13 columns:
\f0\i0 \cf2 \
\pard\pardeftab720\li960\fi-960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 best_bid_price 
\f0\b0 (float64) \'97 Best bid price
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 best_ask_price 
\f0\b0 (float64) \'97 Best ask price
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 best_bid_qty 
\f0\b0 (float64) \'97 Best bid size (contracts or units)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 best_ask_qty 
\f0\b0 (float64) \'97 Best ask size (contracts or units)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 last_trade_price 
\f0\b0 (float64) \'97 Last executed trade price
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 last_trade_qty 
\f0\b0 (float64) \'97 Last executed trade size
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 mid_price 
\f0\b0 (float64) \'97 0.5*(best_bid_price + best_ask_price)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 spread_abs 
\f0\b0 (float64) \'97 best_ask_price \uc0\u8722  best_bid_price
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 spread_bps 
\f0\b0 (float64) \'97 (spread_abs / mid_price) * 10_000
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 volume_1s 
\f0\b0 (float64) \'97 Trade volume over the last 1s window
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 order_imbalance_1s 
\f0\b0 (float64) \'97 (best_bid_qty \uc0\u8722  best_ask_qty) / (best_bid_qty + best_ask_qty)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 volatility_30s 
\f0\b0 (float64) \'97 Rolling std of mid-price returns over 30s
\fs32 \
\pard\pardeftab720\li960\fi-960\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 microprice 
\f0\b0 (float64) \'97 (best_bid_price*best_ask_qty + best_ask_price*best_bid_qty) / (best_bid_qty + best_ask_qty)
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f2\i \cf3 On-chain (Litecoin node) \'97 10 columns:
\f0\i0 \cf2 \
\pard\pardeftab720\li960\fi-960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 mempool_tx_count 
\f0\b0 (int64) \'97 Number of transactions currently in mempool
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 mempool_vsize_mb 
\f0\b0 (float64) \'97 Estimated mempool virtual size (MB)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 median_fee_sat_per_vbyte 
\f0\b0 (float64) \'97 Median feerate across mempool (sat/vB)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 mean_fee_sat_per_vbyte 
\f0\b0 (float64) \'97 Mean feerate across mempool (sat/vB)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 tx_count_last_block 
\f0\b0 (int64) \'97 Transactions in the most recent block
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 avg_block_interval_sec_6 
\f0\b0 (float64) \'97 Average block interval over last 6 blocks (s)
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 onchain_volume_ltc_10m 
\f0\b0 (float64) \'97 Sum of transferred LTC over trailing 10 minutes
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 whale_tx_count_10m 
\f0\b0 (int64) \'97 Count of large-value tx (\uc0\u8805  THRESHOLD_LTC; configurable) over trailing 10 minutes
\fs32 \

\fs29\fsmilli14667 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 whale_total_value_ltc_10m 
\f0\b0 (float64) \'97 Total LTC value of whale tx over trailing 10 minutes
\fs32 \
\pard\pardeftab720\li960\fi-960\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 active_addresses_10m 
\f0\b0 (int64) \'97 Estimated count of active unique addresses over trailing 10 minutes
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Column order convention: 
\f0\b0 1 = timestamp; 2\'9614 = off-chain columns; 15\'9624 = on-chain columns.
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0
\cf4 13.2.1.2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Per-Second Row Schema\
\pard\pardeftab720\sl337\sa320\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Per-Second Row Schema (saved to Parquet each 1-s tick):
\f0\b0  
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sl337\sa320\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 timestamp; raw features; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f7\fs32 \uc0\u956 _h, \u963 _h
\f1\b\fs29\fsmilli14667  for each horizon
\f0\b0 ; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Kelly 
\f7\b0\fs32 f*_h
\f1\b\fs29\fsmilli14667  for each horizon
\f0\b0 ; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 aggregation weights 
\f7\b0\fs32 w_h
\f0\fs29\fsmilli14667  
\f1\b ; 
\f3\b0\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 weighted Kelly 
\f7\b0\fs32 f_w
\f1\b\fs29\fsmilli14667  
\f0\b0 ; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 action (buy/sell/hold); 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 order side/size/notional; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 fills; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 all fees
\f0\b0 ; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 position size; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 cash; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 invested value; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 total capital; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 realized P&L (trade)
\f0\b0 ; 
\f3\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 cumulative P&L (session)
\f3\b0\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.2.2\'a0 Data Collecting and Saving Process for the Re-Training of the Bayesian LSTM Model\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 When paper trading / trading process is going on, the on-chain and off-chain data collecting and saving process is continuing according to the same protocol as during the first training and testing process.
\fs32 \

\fs29\fsmilli14667 When a running and unbroken period of paper trading / trading process has last for 14 days, the collected and saved on-chain and off-chain data is processed exactly according to the same protocol as described here. 
\fs32 \

\fs29\fsmilli14667 The Parquet file of these 14 days is merged with the Parquet file of the previous 14 days, creating a new 28-day Parquet file. 
\fs32 \

\fs29\fsmilli14667 The Bayesian LSTM model is re-trained with this new 28-day dataset, and this newly trained model replaces the earlier Bayesian LSTM model in making the LTC price predictions.\'a0\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 The first Bayesian LSTM model re-training is made only after a continuous 28-day period of paper trading / trading period has been completed. The Bayesian LSTM training, testing or re-training process must not be made with a dataset based on shorter time period than 28 days.\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.3\'a0\'a0 Adding the Price Prediction Columns to Parquet File\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Immediately, after these \'91object (list of float64)\'92 columns have been split into several separate columns, the data of this row is given to the Bayesian LSTM model in order to get the Litecoin price prediction values for each price prediction time horizons inside the sliding window.
\fs32 \

\fs29\fsmilli14667 The Bayesian LSTM model then produces price predictions for six future price horizons, for 10, 30, 60, 90, 120, and 240 seconds from this moment (\'93the Moment Zero\'94). 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 In other words, additional six columns are made to the same Parquet file: one column for each of the six Litecoin future price prediction time horizon (for time horizons 10, 30, 60, 90, 120, and 240 seconds). 
\fs32 \

\fs29\fsmilli14667 The headers of these columns are as follows:
\fs32 \

\fs29\fsmilli14667 prediction_10s\uc0\u8232 prediction_30s\u8232 prediction_60s\u8232 prediction_90s\u8232 prediction_120s\u8232 prediction_240s
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 The price prediction values for each of these time horizons are located in the same row as the input parameters described above.
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.4\'a0\'a0 Adding the Kelly Fraction Column to Parquet file\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 After the price prediction columns have been saved to the Parquet file, we should calculate the Kelly Fraction in the way described in the separate document (according to the Distributional Kelly Criterion Method). The Kelly Fraction is calculated based on the on-chain and off-chain parameters collected and saved and the price predictions made by the pre-trained Bayesian LSTM model. 
\fs32 \

\fs29\fsmilli14667 After the value of current Kelly Fraction has been calculated, it is saved to an additional column of the same row of the same Parquet file.\'a0 
\fs32 \

\fs29\fsmilli14667 The header of this column is \'91kelly_fraction\'92.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 \'a0\
13.5\'a0\'a0 Predicting the Crypto Prices and Defining the Profitable Amount of the Capital to Be Invested at Each Moment \
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f1\b\fs32 \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 First, I want to emphasize the critical importance of this section. It plays a pivotal role in designing the entire paper trading system.
\fs32 \

\fs29\fsmilli14667 The Bayesian LSTM model predicts future cryptocurrency prices not as single point estimates, but as 
\f1\b probability distributions
\f0\b0 . 
\fs32 \

\fs29\fsmilli14667 Every 1
\f1\b  second
\f0\b0 , the system must reassess whether the 
\f1\b current allocation of invested vs. non-invested capital
\f0\b0  aligns with the latest set of Kelly Fractions (or the Weighted Kelly Fraction). 
\fs32 \

\fs29\fsmilli14667 \uc0\u8232 If there's a clear mismatch between the capital allocation and the Kelly recommendations, the system should execute a trade immediately, either increasing or decreasing the investment\'97based on the direction suggested by the \'91Kelly Fractions\'92 (or the \'91Weighted Kelly Fraction\'92). 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 In other words:
\f0\b0\fs32 \

\f1\b\fs29\fsmilli14667 The percentage of invested capital must be continuously adjusted based on the \'91Price Predictions\'92 and \'91Kelly Fractions\'92 across all six \'91Prediction Horizons\'92.
\f0\b0\fs32 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Investment decisions\'97whether to enter, exit, or resize positions\'97must be made 
\f1\b every 1 second and
\f0\b0 , if the price predictions and the calculated \'91Kelly Fractions\'91 (or the \'91Weighted Kelly Fraction\'92) indicate that this would be profitable.
\f1\b  
\f0\b0\fs32 \

\fs29\fsmilli14667 Finally, when making the decision whether to trade, a \'91
\f1\b Weighted Kelly Fraction\'92
\f0\b0  should be calculated. This aggregated Kelly value offers better transparency and decision-making accuracy than relying on the \'91Kelly Fraction\'92 of a single \'91Prediction Horizon\'92 inside the \'91Sliding Window\'92. It also helps to 
\f1\b mitigate bias caused by outlier predictions
\f0\b0  from any individual forecast.
\fs32 \

\fs29\fsmilli14667 So, the final decision - whether to increase or decrease the amount of invested capital (or alternatively the decision to hold the invested capital amount same as earlier) is made based on the calculation of the \'91Price Predictions\'92 of all the six price \'91Prediction Horizons\'92 and the \'91Weighted Kelly Fraction\'92.\'a0\'a0 
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.6\'a0\'a0 Bayesian LSTM Paper Trading System: Summary and Logic Aligned with Distributional Kelly \cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Defaults & guards. 
\f0\b0 If not specified: session duration = 30 minutes; validate 5 min \uc0\u8804  duration \u8804  8 h. Exposure cap f_w 
\f5 \uc0\u8712 
\f0  [\uc0\u8722 1,1]. Per-trade size: \'8050\'9620% of total capital (post-cost). Hysteresis: rebalance only if |f_w \u8722  f_current| \u8805  0.02 or direction flips; optional min hold 3 s.
\fs32 \

\f1\b\fs29\fsmilli14667 Telemetry row schema (1 Hz). 
\f0\b0 Every second write one row with: timestamp_ms; all input features; \uc0\u956 _h, \u963 _h (per horizon); p_up_h, p_down_h (cost-aware; per horizon); f*_h (integral; per horizon); w_h (entropy-adaptive weights); f_w (weighted Kelly); action (long/short/flat); order_notional; executed_qty; avg_fill_price; fees; position_qty; position_notional; cash; invested_value; total_capital; realized_PnL; unrealized_PnL; cumulative_PnL for h 
\f5 \uc0\u8712 
\f0  \{10,30,60,90,120,240\}.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.1\'a0 Overview of the System\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 The system runs a Bayesian LSTM that emits probabilistic price forecasts at six horizons (10/30/60/90/120/240 s). Predictions refresh every second from a 20-minute unified buffer (off-chain: Binance; on-chain: Litecoin node/mempool). Position sizing uses Distributional Kelly on the full predictive distribution (not thresholded \'93confidence\'94).
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.2\'a0 Formal Objective for Distributional Kelly \cf7 \uc0\u8232 \u8232 \cf4 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 Cost model. 
\f0\b0 Per-horizon return r(\uc0\u916 P) subtracts fees, spread, and slippage (default \u8805  20 bps per leg). For round-trips, include both entry and exit costs.
\fs32 \
\'a0\
\pard\pardeftab720\sl429\sa213\qc\partightenfactor0

\f7\fs37\fsmilli18667 \cf2 G
\f0 \uc0\u8341 
\f7 (f) = \uc0\u8747 \u8336 
\f0 \uc0\u8341 
\f7 \uc0\u7495 
\f0 \uc0\u8341 
\f7  p
\f0 \uc0\u8341 
\f7 (\uc0\u916 P) \'b7 log(1 + f \'b7 r(\u916 P)) d(\u916 P)
\f0\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 where p_h(\uc0\u916 P) is the predictive density; r(\u916 P) is cost-adjusted unit-notional return; and [a_h,b_h] are SL/TP bounds. The optimal is f*_h = argmax_f G_h(f).
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa213\qc\partightenfactor0

\f7 \cf2 G_h(f) \uc0\u8776  \u931 _i w_i \'b7 log(1 + f \'b7 r(\u916 P_i)),\'a0\'a0 with\'a0\'a0 \u931 _i w_i = 1,\'a0\'a0 \u916 P_i 
\f5 \uc0\u8712 
\f7  [a_h, b_h]
\f0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 Optimize f on [\uc0\u8722 1,1] with a bounded scalar optimizer; enforce 1 + f \'b7 r(\u916 P) > 0 on the domain.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.3\'a0 Data Alignment & 1 Hz Loop\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95 Ingest & align. Sample off-/on-chain streams; snap forward to next whole-second. If multiple records map to the same second, keep the latest original timestamp (no look-ahead).
\fs32 \

\fs29\fsmilli14667 \'95 Predict. From the unified 20-min buffer, compute \uc0\u956 _h, \u963 _h and attention-entropy diagnostics per horizon.
\fs32 \

\fs29\fsmilli14667 \'95 Per-horizon Kelly. Evaluate G_h(f) with cost-adjusted r(\uc0\u916 P); find f*_h.
\fs32 \

\fs29\fsmilli14667 \'95 Aggregate. Compute f_w = \uc0\u931 _h w_h f*_h; apply Kelly multiplier (e.g., 0.5) and clamp to [\u8722 1,1].
\fs32 \

\fs29\fsmilli14667 \'95 Execute. If |f_w \uc0\u8722  f_current| \u8805  0.02 or direction flips, rebalance toward f_w subject to \'8050\'9620% notional limits; else hold.
\fs32 \

\fs29\fsmilli14667 \'95 Record. Write the telemetry row; update P&L and state.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.4\'a0 Horizon Aggregation (Adaptive-Only)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Combine \{f*_h\} using entropy-adaptive weights \{w_h\} derived from attention entropy at each horizon; renormalize so \uc0\u931 _h w_h = 1. No fixed percentages are used.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.5\'a0 Execution & Positioning Rules\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'95 Hysteresis & holds. Only rebalance on threshold breach or direction flip; optional min hold 3 s.
\fs32 \

\fs29\fsmilli14667 \'95 Caps. f_w 
\f5 \uc0\u8712 
\f0  [\uc0\u8722 1,1]. Per-trade notional \'8050\'9620% of total capital (post-cost).
\fs32 \

\fs29\fsmilli14667 \'95 Neutral & session end. Treat |f_w| < 0.02 as neutral; force flat at session end.
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.6\'a0 Costs & SL/TP\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Costs. Default \uc0\u8805  20 bps per leg (fees + spread + slippage); log effective costs used each run.
\fs32 \

\fs29\fsmilli14667 SL/TP. Define per-horizon [a_h,b_h]; clip r(\uc0\u916 P) beyond bounds (no payoff outside).
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.7\'a0 Telemetry Row (Audit-Grade, 1 Hz)\
\pard\pardeftab720\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\

\fs29\fsmilli14667 timestamp_ms; 
\fs32 \

\fs29\fsmilli14667 inputs; 
\fs32 \

\fs29\fsmilli14667 \uc0\u956 _h; 
\fs32 \

\fs29\fsmilli14667 \uc0\u963 _h; 
\fs32 \

\fs29\fsmilli14667 p_up_h; 
\fs32 \

\fs29\fsmilli14667 p_down_h; 
\fs32 \

\fs29\fsmilli14667 f*_h; 
\fs32 \

\fs29\fsmilli14667 w_h; 
\fs32 \

\fs29\fsmilli14667 f_w; 
\fs32 \

\fs29\fsmilli14667 action; 
\fs32 \

\fs29\fsmilli14667 order_notional; 
\fs32 \

\fs29\fsmilli14667 executed_qty; 
\fs32 \

\fs29\fsmilli14667 avg_fill_price; 
\fs32 \

\fs29\fsmilli14667 fees; 
\fs32 \

\fs29\fsmilli14667 position_qty; 
\fs32 \

\fs29\fsmilli14667 position_notional; 
\fs32 \

\fs29\fsmilli14667 cash; 
\fs32 \

\fs29\fsmilli14667 invested_value; 
\fs32 \

\fs29\fsmilli14667 total_capital; 
\fs32 \

\fs29\fsmilli14667 realized_PnL; 
\fs32 \

\fs29\fsmilli14667 unrealized_PnL; 
\fs32 \

\fs29\fsmilli14667 cumulative_PnL per second, with horizon-indexed fields for h 
\f5 \uc0\u8712 
\f0  \{10,30,60,90,120,240\}.
\fs32 \
\pard\pardeftab720\sl368\sa213\partightenfactor0
\cf2 \'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.8\'a0 Metrics & Visualizations\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Tables. Trades summary, hit-rate, net profit factor, max drawdown, exposure stats.
\fs32 \

\fs29\fsmilli14667 Plots. Equity curve; exposure over time; per-horizon \uc0\u956 ,\u963 ; six-horizon predicted vs. realized; Kelly components (f*_h, w_h, f_w) over time.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.9\'a0 Failure Handling\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Data gaps. Forward-fill \uc0\u8804  2 s; beyond that, hold exposure and mark data_status=degraded.
\fs32 \

\fs29\fsmilli14667 Optimizer fail. Set f*_h = 0 for that horizon; mark kelly_status=fail(h).
\fs32 \

\fs29\fsmilli14667 Variance floor. If \uc0\u963 _stable,h hits floor or G_h(f) is flat, set f*_h = 0 and log.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.10\'a0 Configuration (declare & log)\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 kelly_multiplier (e.g., 0.5); costs_bps_per_leg (\uc0\u8805  20); hysteresis_eps (0.02); min_hold_s (3); notional_min_eur (\'8050); notional_max_pct (0.20); sl_tp_per_horizon; entropy_to_weight_mapping; seed. Log effective values at session start.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.6.11\'a0 Reproducibility & Protocol Compliance\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\f0\i0 \cf2 \'a0\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 Persist seeds and repo commit; save config snapshot and full telemetry Parquet. Enforce core_protocol.md checks (pre-commit audits and math validation) before runs; block runs that fail schema or timing contracts.
\fs32 \
\'a0\
\'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.7\'a0\'a0 Analyzing Paper Trading Performance\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f1\b\fs32 \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f1\b\fs29\fsmilli14667 \cf2 Performance Metrics to Track
\f0\b0 :
\fs32 \
\pard\pardeftab720\li1541\fi-771\sa213\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Profit and Loss (P&L)
\f0\b0 : Measure overall profitability.\uc0\u8232 \u8232 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Sharpe Ratio
\f0\b0 : Evaluate risk-adjusted returns of the strategy based on predictions. \uc0\u8232 \u8232 
\fs32 \
\pard\pardeftab720\li2501\fi-480\sa213\partightenfactor0

\f10\fs26\fsmilli13333 \cf2 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 Sharpe ratio = (Average return of the portfolio \'96 Risk-free rate) / Standard deviation of the portfolio\'92s returns\uc0\u8232 \u8232 
\fs32 \

\f10\fs26\fsmilli13333 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 A 
\f1\b higher
\f0\b0  Sharpe ratio indicates better risk-adjusted performance (getting more return per unit of risk). A 
\f1\b lower
\f0\b0  or 
\f1\b negative
\f0\b0  Sharpe ratio suggests that the investment is performing poorly relative to its risk.
\fs32 \
\pard\pardeftab720\li2501\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li2501\fi-480\sa213\partightenfactor0

\f10\fs26\fsmilli13333 \cf2 \'a7
\f3\fs18\fsmilli9333 \'a0 
\f0\fs29\fsmilli14667 In the context of ultra-short-term crypto trading, the risk-free rate can be estimated to be zero.\'a0 
\fs32 \
\pard\pardeftab720\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li1511\fi-756\sl313\sa213\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Maximum Drawdown
\f0\b0 : Assess the largest peak-to-trough decline.
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Win/Loss Ratio
\f0\b0 : Track the number of successful trades versus losses.
\fs32 \
\pard\pardeftab720\li1511\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li1511\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 13.8\'a0\'a0 Printing and Plotting Paper Trading results\
\pard\pardeftab720\li960\sl368\sa213\partightenfactor0

\f1\b\fs32 \cf2 \'a0
\f0\b0 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.8.1\'a0 Print the next variables every time a new transaction is made:\
\pard\pardeftab720\li960\sl337\sa213\partightenfactor0

\f1\i0\b\fs29\fsmilli14667 \cf2 \'a0
\f0\b0\fs32 \
\pard\pardeftab720\li960\fi-480\sl313\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The value of invested capital at this moment
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Cash amount that is not invested at this moment
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The sum of the value of invested capital and the cash amount that is not invested at this moment (total capital) 
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Profit and Loss (P&L): net profit based on the predictions and simulated trades
\fs32 \
\pard\pardeftab720\li960\fi-480\sa213\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Win/Loss Ratio: Track the number of successful trades versus losses.
\fs32 \
\pard\pardeftab720\li960\fi-480\sl313\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 The predictions for each prediction moment inside the Sliding Window (time horizons 10, 30, 60, 90, 120, and 240 seconds from \'91the Moment Zero\'92)
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 \'92\uc0\u956 \'92: Expected excess return (mean prediction of price movement)
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 \'91\uc0\u963 ^2\'92: Variance of returns
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 \'93
\f1\b Kelly Fraction f*_int
\f0\b0  (Distributional Kelly, integral/optimizer); 
\f1\b f*_gauss
\f0\b0  = \uc0\u956 /\u963 \'b2 (diagnostic only).\'94
\fs32 \

\f4\fs29\fsmilli14667 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Probabilities for each Prediction Moment (time horizons 10, 30, 60, 90, 120, and 240 seconds from \'91the Moment Zero\'92)
\fs32 \
\pard\pardeftab720\li960\sl313\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 13.8.2\'a0 Make the next plots after the paper trading session has been finalized\
\pard\pardeftab720\sl337\sa213\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl313\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Make a graph with a curve indicating the crypto price development during the whole paper trading session and with a curve indicating the sum of the value of invested capital and the cash amount that is not invested (total capital) (Both curves in the same graph). 
\fs32 \
\pard\pardeftab720\li2218\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl313\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Make a graph showing the curve indicating the crypto price development and the prediction values made for each Prediction Moment (time horizons 10, 30, 60, 90, 120, and 240 seconds from \'91the Moment Zero\'92)
\fs32 \
\pard\pardeftab720\li960\sl337\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\li960\fi-480\sl313\partightenfactor0

\f4\fs29\fsmilli14667 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 (Make a separate curve indicating the predicted prices of each Prediction Moment.)
\fs32 \
\pard\pardeftab720\li960\sl337\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl313\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \

\fs29\fsmilli14667 \'a0
\fs32 \
\pard\pardeftab720\sl313\sa213\partightenfactor0

\fs29\fsmilli14667 \cf2 \'a0
\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\fs42\fsmilli21333 \cf4 14. Progressive Development and Deployment Strategy\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 14.1 \'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Development Philosophy and Approach\
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The algorithmic Litecoin trading system follows a progressive development methodology that begins with terminal-based development and transitions to headless cloud deployment. This approach recognizes that complex trading systems require iterative development with immediate feedback during the initial phases, followed by robust, automated operation in production.
\f3\fs32 \

\f0\fs29\fsmilli14667 The core principle is 
\f1\b dual-mode architecture from inception
\f0\b0  - every system component must be designed to operate seamlessly in both terminal development mode and headless production mode. This eliminates the need for major architectural rewrites during deployment and ensures that development insights translate directly to production performance.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f2\i\fs37\fsmilli18667 \cf10 14.1.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Development Phases
\f0\i0 \cf4 \
\pard\pardeftab720\sa320\partightenfactor0

\fs29\fsmilli14667 \cf2 The development progresses through distinct phases:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Terminal Development
\f0\b0 : Local development with rich visual interfaces for debugging and validation
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Local Headless Testing
\f0\b0 : Running production-like configurations locally to identify transition issues
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Staging Deployment
\f0\b0 : Cloud-based testing environment that mirrors production infrastructure
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Production Deployment
\f0\b0 : Full DigitalOcean deployment with 24/7 autonomous operation
\f3\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 \'a0\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl429\sa106\partightenfactor0

\fs37\fsmilli18667 \cf4 14.2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Dual-Mode Architecture Requirements\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i\fs32 \cf4 14.2.1\'a0 Base Module Design\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 All system modules must inherit from a common base architecture that supports both operational modes. The base module framework provides mode-aware initialization, ensuring appropriate message brokers, storage systems, and user interfaces are configured based on the runtime environment.
\f3\fs32 \

\f0\fs29\fsmilli14667 The architecture distinguishes between three operational modes:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Terminal Mode
\f0\b0 : Interactive development with local file storage and in-memory message passing
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Headless Mode
\f0\b0 : Production operation with distributed messaging and persistent storage
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f1\b\fs29\fsmilli14667 Test Mode
\f0\b0 : Automated testing with mock services and isolated environments
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.2.2\'a0 Message Broker Abstraction\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 During terminal development, modules communicate through lightweight, in-memory message queues that provide immediate feedback and easy debugging. In production, the same communication interface uses Redis-based distributed messaging with persistence and fault tolerance.
\f3\fs32 \

\f0\fs29\fsmilli14667 The message broker abstraction ensures identical communication patterns across modes while optimizing for the specific requirements of each environment - low latency and rich debugging in development, reliability and scalability in production.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.2.3\'a0 Storage System Flexibility\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Development environments use local Parquet file storage with buffered writes to maintain development speed and simplify debugging. Production environments use TimescaleDB for time-series data with Redis caching for frequently accessed information.
\f3\fs32 \

\f0\fs29\fsmilli14667 The storage abstraction layer provides identical interfaces for data persistence and retrieval while handling the underlying complexity of different storage technologies.
\f3\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0 \cf2 \'a0
\f3 \

\f0 \'a0
\f3 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 14.3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Local Development Environment Setup\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.3.1\'a0 Terminal Interface Framework\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The development environment provides rich terminal interfaces using modern CLI frameworks that display real-time market data, prediction outputs, and trading decisions. The interface organizes information into logical sections: market data feeds, prediction model outputs, and trading execution status.
\f3\fs32 \

\f0\fs29\fsmilli14667 The terminal interface serves as both a development tool and a monitoring system, providing immediate visual feedback on system behavior and performance metrics. This visual feedback is crucial during algorithm development and parameter tuning phases.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.3.2\'a0 Configuration Management\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Development configurations use local file storage, simplified logging, and testnet API connections to create a safe development environment. Production configurations specify distributed storage, structured logging, and live market connections.
\f3\fs32 \

\f0\fs29\fsmilli14667 Configuration files use environment-specific settings that allow the same codebase to operate across different environments without code modifications. Environment variables handle sensitive information like API keys and database credentials.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.3.3\'a0 Development CLI Tools\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 A comprehensive command-line interface provides tools for all development tasks: data collection, model training, paper trading, and system monitoring. Each tool operates in the appropriate mode based on configuration settings.
\f3\fs32 \

\f0\fs29\fsmilli14667 The CLI framework includes guided workflows that help developers progress through the development phases with appropriate validation and testing at each stage.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl490\sa106\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 14.4 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Terminal-to-Headless Transition Process\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.4.1\'a0 Migration Validation\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The transition process includes comprehensive validation to ensure headless operation maintains the functionality and performance characteristics established during terminal development. This validation includes extended headless operation periods to identify issues that only emerge during continuous operation.
\f3\fs32 \

\f0\fs29\fsmilli14667 Key validation criteria include:
\f3\fs32 \
\pard\pardeftab720\li960\fi-480\sa320\partightenfactor0

\f4\fs26\fsmilli13333 \cf2 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 All data flows operate without UI dependencies
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Performance metrics match terminal development baselines
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Error recovery mechanisms function without human intervention
\f3\fs32 \

\f4\fs26\fsmilli13333 \'e1
\f3\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f0\fs29\fsmilli14667 Logging captures sufficient information for remote debugging
\f3\fs32 \
\pard\pardeftab720\li960\sa320\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.4.2\'a0 Configuration Export and Testing\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Development configurations are systematically transformed into production configurations through automated export processes. These exported configurations undergo validation testing in local headless mode before cloud deployment.
\f3\fs32 \

\f0\fs29\fsmilli14667 The export process handles the translation of local file paths to distributed storage locations, development API endpoints to production endpoints, and local message brokers to distributed systems.
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 \'a0\
14.4.3\'a0 Parallel Operation Testing\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Before full migration, the system operates in parallel modes - terminal development and headless production - with identical market data inputs. This parallel operation validates that headless deployment produces equivalent trading decisions and performance outcomes.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 \'a0\
14.5 DigitalOcean Infrastructure Requirements\
\'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i\fs32 \cf4 14.5.1\'a0 Computational Resources\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The production deployment requires sufficient computational resources to handle multiple concurrent processes: real-time data collection from external APIs and blockchain nodes, Bayesian LSTM inference across multiple prediction horizons, and continuous trading decision calculations.
\f3\fs32 \

\f0\fs29\fsmilli14667 Minimum infrastructure specifications include 4 vCPUs with 8GB RAM for the primary trading system, with additional block storage for blockchain data persistence and time-series data archival. The infrastructure must support the precise timing requirements established during development.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.5.2\'a0 Service Architecture\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The production deployment uses containerized services managed through Docker Compose, with each major system component operating as an independent service. Services include the Litecoin blockchain node, Redis message broker, TimescaleDB time-series database, and the core trading application.
\f3\fs32 \

\f0\fs29\fsmilli14667 Service dependencies are managed through proper startup sequencing and health checks to ensure system stability during restarts and updates.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.5.3\'a0 Network Configuration and Security\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The deployment implements network security through firewall rules that restrict access to necessary ports only. All external communications use encrypted connections, and sensitive configuration data is managed through environment variables rather than embedded credentials.
\f3\fs32 \

\f0\fs29\fsmilli14667 The network configuration allows the required external connections: HTTPS access to trading APIs, peer-to-peer blockchain networking, and SSH access for system administration.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 14.6 Production Deployment Strategy\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.6.1\'a0 Containerization and Process Management\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The production system uses Docker containerization to manage the complex dependencies between the Litecoin blockchain node, database systems, and trading applications. Container orchestration ensures proper startup sequencing and automatic restart of failed services.
\f3\fs32 \

\f0\fs29\fsmilli14667 Process supervision through systemd or Supervisor provides additional reliability layers, ensuring that critical services restart automatically after failures and that system resources are managed appropriately.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.6.2\'a0 Data Flow Management\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Production data flows maintain the precise timing requirements established during development while adding reliability and persistence mechanisms. Message queues implement priority handling for time-critical data and rate limiting to prevent system overload.
\f3\fs32 \

\f0\fs29\fsmilli14667 The data flow architecture ensures that no market data or trading decisions are lost during system restarts or temporary service failures.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.6.3\'a0 Backup and Recovery Procedures\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Automated backup procedures protect both blockchain data and trading performance data. Recovery procedures enable rapid system restoration from hardware failures or software corruption with minimal impact on trading continuity.
\f3\fs32 \

\f0\fs29\fsmilli14667 Backup strategies account for the different recovery time requirements of various data types - immediate recovery for trading state information and longer-term recovery acceptable for historical blockchain data.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 14.7 \'a0 Monitoring and Operations\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.7.1\'a0 Comprehensive Logging Strategy\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Production logging captures all system events in structured formats suitable for automated analysis. Log levels are configured to balance information completeness with storage requirements and processing overhead.
\f3\fs32 \

\f0\fs29\fsmilli14667 Logging includes performance metrics, trading decisions, error conditions, and system health indicators necessary for remote system monitoring and debugging.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.7.2\'a0 Alerting and Notification Systems\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Automated alerting systems monitor critical system metrics and trading performance indicators. Alerts are configured with appropriate severity levels and delivery mechanisms to ensure timely response to system issues.
\f3\fs32 \

\f0\fs29\fsmilli14667 Alert conditions include system resource exhaustion, trading performance degradation, external API failures, and unusual market conditions that might require human intervention.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.7.3\'a0 Performance Monitoring\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Continuous performance monitoring tracks system latency, throughput, and resource utilization to ensure production operation meets the performance standards established during development.
\f3\fs32 \

\f0\fs29\fsmilli14667 Performance metrics include data collection latency, model inference time, trading decision latency, and overall system resource utilization patterns.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl429\sa106\partightenfactor0

\f0\fs37\fsmilli18667 \cf4 14.8 Migration Checklist and Validation\
\pard\pardeftab720\sl368\sa213\partightenfactor0

\fs32 \cf2 \'a0\
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.8.1\'a0 Pre-Migration Validation\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Before transitioning to headless operation, comprehensive validation ensures all system components operate correctly in both modes. This validation includes extended operation periods to identify issues that only emerge during continuous operation.
\f3\fs32 \

\f0\fs29\fsmilli14667 Validation criteria encompass functional correctness, performance maintenance, error recovery capability, and operational monitoring adequacy.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.8.2\'a0 Staged Deployment Process\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 The migration follows a staged approach: local headless testing, staging environment deployment, parallel operation validation, and gradual transition to full production operation.
\f3\fs32 \

\f0\fs29\fsmilli14667 Each stage includes specific validation criteria and rollback procedures to ensure system stability throughout the transition process.
\f3\fs32 \

\f0\fs29\fsmilli14667 \'a0
\f3\fs32 \
\pard\pardeftab720\sl368\sa53\partightenfactor0

\f2\i \cf4 14.8.3\'a0 Ongoing Operational Procedures\
\pard\pardeftab720\sa320\partightenfactor0

\f0\i0\fs29\fsmilli14667 \cf2 Production operation includes regular maintenance procedures, performance optimization, and system updates that maintain trading system effectiveness over time.
\f3\fs32 \

\f0\fs29\fsmilli14667 Operational procedures account for the 24/7 nature of cryptocurrency markets and the need for minimal system downtime during maintenance activities.
\f3\fs32 \

\f0\fs29\fsmilli14667 This progressive development and deployment strategy ensures that the sophisticated algorithmic trading system transitions smoothly from development to production while maintaining the performance characteristics and reliability required for autonomous cryptocurrency trading operations.
\f3\fs32 \
}